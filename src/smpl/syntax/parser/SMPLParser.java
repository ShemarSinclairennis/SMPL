
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package smpl.syntax.parser;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import smpl.exceptions.SMPLSyntaxException;
import smpl.syntax.Binding;
import smpl.syntax.lexer.SMPLLexer;
import smpl.syntax.ast.core.Exp;
import smpl.syntax.ast.core.SMPLProgram;
import smpl.syntax.ast.*;
import smpl.types.SMPLValue;
import smpl.types.compound.SMPLPair;
import smpl.types.compound.SMPLVector;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SMPLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SMPLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SMPLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\005\003\000\002\002\004\000\002\006" +
    "\004\000\002\006\003\000\002\007\003\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\010\006\000" +
    "\002\023\007\000\002\023\005\000\002\013\004\000\002" +
    "\013\003\000\002\014\005\000\002\014\003\000\002\012" +
    "\005\000\002\011\003\000\002\011\003\000\002\011\005" +
    "\000\002\015\004\000\002\015\003\000\002\016\005\000" +
    "\002\016\003\000\002\022\007\000\002\017\005\000\002" +
    "\020\004\000\002\020\003\000\002\021\005\000\002\021" +
    "\003\000\002\002\005\000\002\003\007\000\002\004\006" +
    "\000\002\024\006\000\002\024\010\000\002\030\006\000" +
    "\002\030\006\000\002\027\005\000\002\027\005\000\002" +
    "\031\005\000\002\031\003\000\002\032\005\000\002\032" +
    "\003\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\003\000\002\034\005\000\002\034\005\000\002" +
    "\034\003\000\002\035\005\000\002\035\005\000\002\035" +
    "\003\000\002\036\005\000\002\036\005\000\002\036\005" +
    "\000\002\036\003\000\002\037\005\000\002\037\003\000" +
    "\002\040\004\000\002\040\004\000\002\040\004\000\002" +
    "\040\004\000\002\040\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\005\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\043" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\056\004\007\006\015\010\046\015\uffb1\016" +
    "\034\017\022\026\031\037\025\041\026\043\052\044\054" +
    "\045\027\046\057\047\021\050\047\051\011\056\036\057" +
    "\020\060\014\061\053\062\023\063\040\001\002\000\006" +
    "\007\ufff5\015\ufff5\001\002\000\004\002\236\001\002\000" +
    "\014\005\ufff0\007\ufff0\012\ufff0\013\ufff0\014\ufff0\001\002" +
    "\000\052\004\007\005\uffb1\006\015\010\046\014\230\016" +
    "\034\017\022\026\031\037\025\041\026\044\054\045\027" +
    "\050\047\051\011\056\064\057\020\060\014\061\053\062" +
    "\023\063\040\001\002\000\060\002\001\004\007\006\015" +
    "\010\046\015\uffb1\016\034\017\022\026\031\037\025\041" +
    "\026\043\052\044\054\045\027\046\057\047\021\050\047" +
    "\051\011\056\036\057\020\060\014\061\053\062\023\063" +
    "\040\001\002\000\004\006\226\001\002\000\040\005\uffd1" +
    "\007\uffd1\012\uffd1\013\uffd1\014\uffd1\024\074\025\075\027" +
    "\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1" +
    "\036\uffd1\001\002\000\004\015\223\001\002\000\060\004" +
    "\uffb6\005\uffb6\006\uffb6\007\uffb6\012\uffb6\013\uffb6\014\uffb6" +
    "\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024" +
    "\uffb6\025\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6" +
    "\034\uffb6\035\uffb6\036\uffb6\001\002\000\046\004\007\006" +
    "\015\010\046\016\034\017\022\026\031\037\025\041\026" +
    "\044\054\045\027\050\047\051\011\056\064\057\020\060" +
    "\014\061\053\062\023\063\040\001\002\000\060\004\uffbf" +
    "\005\uffbf\006\uffbf\007\uffbf\012\uffbf\013\uffbf\014\uffbf\016" +
    "\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf" +
    "\025\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034" +
    "\uffbf\035\uffbf\036\uffbf\001\002\000\034\005\uffd8\007\uffd8" +
    "\012\uffd8\013\uffd8\014\uffd8\027\065\030\070\031\066\032" +
    "\072\033\067\034\071\035\uffd8\036\uffd8\001\002\000\060" +
    "\004\uffb7\005\uffb7\006\uffb7\007\uffb7\012\uffb7\013\uffb7\014" +
    "\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7" +
    "\024\uffb7\025\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033" +
    "\uffb7\034\uffb7\035\uffb7\036\uffb7\001\002\000\004\006\216" +
    "\001\002\000\042\004\007\006\015\016\034\017\022\026" +
    "\031\037\025\041\026\045\027\050\047\051\011\056\064" +
    "\057\020\060\014\061\053\062\023\063\040\001\002\000" +
    "\060\004\uffb4\005\uffb4\006\uffb4\007\uffb4\012\uffb4\013\uffb4" +
    "\014\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023" +
    "\uffb4\024\uffb4\025\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4" +
    "\033\uffb4\034\uffb4\035\uffb4\036\uffb4\001\002\000\060\004" +
    "\uffba\005\uffba\006\uffba\007\uffba\012\uffba\013\uffba\014\uffba" +
    "\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024" +
    "\uffba\025\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba" +
    "\034\uffba\035\uffba\036\uffba\001\002\000\042\004\007\006" +
    "\015\016\034\017\022\026\031\037\025\041\026\045\027" +
    "\050\047\051\011\056\064\057\020\060\014\061\053\062" +
    "\023\063\040\001\002\000\060\004\uffb2\005\uffb2\006\uffb2" +
    "\007\uffb2\012\uffb2\013\uffb2\014\uffb2\016\uffb2\017\uffb2\020" +
    "\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\027\uffb2" +
    "\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036" +
    "\uffb2\001\002\000\004\006\207\001\002\000\062\002\ufffd" +
    "\004\ufffd\006\ufffd\010\ufffd\011\ufffd\015\ufffd\016\ufffd\017" +
    "\ufffd\026\ufffd\037\ufffd\041\ufffd\043\ufffd\044\ufffd\045\ufffd" +
    "\046\ufffd\047\ufffd\050\ufffd\051\ufffd\056\ufffd\057\ufffd\060" +
    "\ufffd\061\ufffd\062\ufffd\063\ufffd\001\002\000\042\004\007" +
    "\006\015\016\034\017\022\026\031\037\025\041\026\045" +
    "\027\050\047\051\011\056\064\057\020\060\014\061\053" +
    "\062\023\063\040\001\002\000\060\004\172\005\uffc0\006" +
    "\171\007\uffc0\012\uffc0\013\uffc0\014\uffc0\016\uffc0\017\uffc0" +
    "\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\027" +
    "\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0" +
    "\036\uffc0\001\002\000\054\005\uffc5\007\uffc5\012\uffc5\013" +
    "\uffc5\014\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\023\167\024\uffc5\025\uffc5\027\uffc5\030\uffc5\031\uffc5\032" +
    "\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\001\002\000\042" +
    "\004\007\006\015\016\034\017\022\026\031\037\025\041" +
    "\026\045\027\050\047\051\011\056\064\057\020\060\014" +
    "\061\053\062\023\063\040\001\002\000\016\005\ufff1\007" +
    "\ufff1\012\ufff1\013\ufff1\014\ufff1\036\122\001\002\000\054" +
    "\004\uffbe\006\uffbe\012\133\013\uffbe\015\uffb1\016\uffbe\017" +
    "\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe" +
    "\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035" +
    "\uffbe\036\uffbe\001\002\000\004\013\165\001\002\000\060" +
    "\004\uffb3\005\uffb3\006\uffb3\007\uffb3\012\uffb3\013\uffb3\014" +
    "\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3" +
    "\024\uffb3\025\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033" +
    "\uffb3\034\uffb3\035\uffb3\036\uffb3\001\002\000\004\013\164" +
    "\001\002\000\060\004\uffbb\005\uffbb\006\uffbb\007\uffbb\012" +
    "\uffbb\013\uffbb\014\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb" +
    "\022\uffbb\023\uffbb\024\uffbb\025\uffbb\027\uffbb\030\uffbb\031" +
    "\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\001\002" +
    "\000\060\004\uffbc\005\uffbc\006\uffbc\007\uffbc\012\uffbc\013" +
    "\uffbc\014\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc" +
    "\023\uffbc\024\uffbc\025\uffbc\027\uffbc\030\uffbc\031\uffbc\032" +
    "\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\001\002\000\052" +
    "\005\uffcb\007\uffcb\012\uffcb\013\uffcb\014\uffcb\016\uffcb\017" +
    "\uffcb\020\103\021\104\022\102\024\uffcb\025\uffcb\027\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\001\002\000\044\005\uffce\007\uffce\012\uffce\013\uffce" +
    "\014\uffce\016\077\017\100\024\uffce\025\uffce\027\uffce\030" +
    "\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce" +
    "\001\002\000\056\004\007\006\015\010\046\015\uffb1\016" +
    "\034\017\022\026\031\037\025\041\026\043\052\044\054" +
    "\045\027\046\057\047\021\050\047\051\011\056\036\057" +
    "\020\060\014\061\053\062\023\063\040\001\002\000\004" +
    "\006\157\001\002\000\004\013\156\001\002\000\060\004" +
    "\uffbd\005\uffbd\006\uffbd\007\uffbd\012\uffbd\013\uffbd\014\uffbd" +
    "\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024" +
    "\uffbd\025\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd" +
    "\034\uffbd\035\uffbd\036\uffbd\001\002\000\004\006\140\001" +
    "\002\000\060\004\uffb5\005\uffb5\006\uffb5\007\uffb5\012\uffb5" +
    "\013\uffb5\014\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022" +
    "\uffb5\023\uffb5\024\uffb5\025\uffb5\027\uffb5\030\uffb5\031\uffb5" +
    "\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\001\002\000" +
    "\006\006\125\056\124\001\002\000\052\005\uffc7\007\uffc7" +
    "\012\uffc7\013\uffc7\014\uffc7\016\uffc7\017\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\024\uffc7\025\uffc7\027\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\001\002\000" +
    "\060\004\uffb9\005\uffb9\006\uffb9\007\uffb9\012\uffb9\013\uffb9" +
    "\014\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023" +
    "\uffb9\024\uffb9\025\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\036\uffb9\001\002\000\004\006" +
    "\117\001\002\000\062\002\ufffe\004\ufffe\006\ufffe\010\ufffe" +
    "\011\ufffe\015\ufffe\016\ufffe\017\ufffe\026\ufffe\037\ufffe\041" +
    "\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe" +
    "\051\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe\063" +
    "\ufffe\001\002\000\020\005\uffda\007\uffda\012\uffda\013\uffda" +
    "\014\uffda\035\062\036\uffda\001\002\000\042\004\007\006" +
    "\015\016\034\017\022\026\031\037\025\041\026\045\027" +
    "\050\047\051\011\056\064\057\020\060\014\061\053\062" +
    "\023\063\040\001\002\000\034\005\uffd9\007\uffd9\012\uffd9" +
    "\013\uffd9\014\uffd9\027\065\030\070\031\066\032\072\033" +
    "\067\034\071\035\uffd9\036\uffd9\001\002\000\060\004\uffbe" +
    "\005\uffbe\006\uffbe\007\uffbe\012\uffbe\013\uffbe\014\uffbe\016" +
    "\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe" +
    "\025\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034" +
    "\uffbe\035\uffbe\036\uffbe\001\002\000\042\004\007\006\015" +
    "\016\034\017\022\026\031\037\025\041\026\045\027\050" +
    "\047\051\011\056\064\057\020\060\014\061\053\062\023" +
    "\063\040\001\002\000\042\004\007\006\015\016\034\017" +
    "\022\026\031\037\025\041\026\045\027\050\047\051\011" +
    "\056\064\057\020\060\014\061\053\062\023\063\040\001" +
    "\002\000\042\004\007\006\015\016\034\017\022\026\031" +
    "\037\025\041\026\045\027\050\047\051\011\056\064\057" +
    "\020\060\014\061\053\062\023\063\040\001\002\000\042" +
    "\004\007\006\015\016\034\017\022\026\031\037\025\041" +
    "\026\045\027\050\047\051\011\056\064\057\020\060\014" +
    "\061\053\062\023\063\040\001\002\000\042\004\007\006" +
    "\015\016\034\017\022\026\031\037\025\041\026\045\027" +
    "\050\047\051\011\056\064\057\020\060\014\061\053\062" +
    "\023\063\040\001\002\000\042\004\007\006\015\016\034" +
    "\017\022\026\031\037\025\041\026\045\027\050\047\051" +
    "\011\056\064\057\020\060\014\061\053\062\023\063\040" +
    "\001\002\000\040\005\uffd5\007\uffd5\012\uffd5\013\uffd5\014" +
    "\uffd5\024\074\025\075\027\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\036\uffd5\001\002\000\042\004" +
    "\007\006\015\016\034\017\022\026\031\037\025\041\026" +
    "\045\027\050\047\051\011\056\064\057\020\060\014\061" +
    "\053\062\023\063\040\001\002\000\042\004\007\006\015" +
    "\016\034\017\022\026\031\037\025\041\026\045\027\050" +
    "\047\051\011\056\064\057\020\060\014\061\053\062\023" +
    "\063\040\001\002\000\044\005\uffd0\007\uffd0\012\uffd0\013" +
    "\uffd0\014\uffd0\016\077\017\100\024\uffd0\025\uffd0\027\uffd0" +
    "\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\001\002\000\042\004\007\006\015\016\034\017\022" +
    "\026\031\037\025\041\026\045\027\050\047\051\011\056" +
    "\064\057\020\060\014\061\053\062\023\063\040\001\002" +
    "\000\042\004\007\006\015\016\034\017\022\026\031\037" +
    "\025\041\026\045\027\050\047\051\011\056\064\057\020" +
    "\060\014\061\053\062\023\063\040\001\002\000\052\005" +
    "\uffcc\007\uffcc\012\uffcc\013\uffcc\014\uffcc\016\uffcc\017\uffcc" +
    "\020\103\021\104\022\102\024\uffcc\025\uffcc\027\uffcc\030" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\001\002\000\042\004\007\006\015\016\034\017\022\026" +
    "\031\037\025\041\026\045\027\050\047\051\011\056\064" +
    "\057\020\060\014\061\053\062\023\063\040\001\002\000" +
    "\042\004\007\006\015\016\034\017\022\026\031\037\025" +
    "\041\026\045\027\050\047\051\011\056\064\057\020\060" +
    "\014\061\053\062\023\063\040\001\002\000\042\004\007" +
    "\006\015\016\034\017\022\026\031\037\025\041\026\045" +
    "\027\050\047\051\011\056\064\057\020\060\014\061\053" +
    "\062\023\063\040\001\002\000\052\005\uffc9\007\uffc9\012" +
    "\uffc9\013\uffc9\014\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9" +
    "\022\uffc9\024\uffc9\025\uffc9\027\uffc9\030\uffc9\031\uffc9\032" +
    "\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\001\002\000\052" +
    "\005\uffca\007\uffca\012\uffca\013\uffca\014\uffca\016\uffca\017" +
    "\uffca\020\uffca\021\uffca\022\uffca\024\uffca\025\uffca\027\uffca" +
    "\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036" +
    "\uffca\001\002\000\052\005\uffc8\007\uffc8\012\uffc8\013\uffc8" +
    "\014\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\024" +
    "\uffc8\025\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8" +
    "\034\uffc8\035\uffc8\036\uffc8\001\002\000\052\005\uffcd\007" +
    "\uffcd\012\uffcd\013\uffcd\014\uffcd\016\uffcd\017\uffcd\020\103" +
    "\021\104\022\102\024\uffcd\025\uffcd\027\uffcd\030\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\001\002" +
    "\000\044\005\uffcf\007\uffcf\012\uffcf\013\uffcf\014\uffcf\016" +
    "\077\017\100\024\uffcf\025\uffcf\027\uffcf\030\uffcf\031\uffcf" +
    "\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\001\002\000" +
    "\040\005\uffd7\007\uffd7\012\uffd7\013\uffd7\014\uffd7\024\074" +
    "\025\075\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034" +
    "\uffd7\035\uffd7\036\uffd7\001\002\000\040\005\uffd3\007\uffd3" +
    "\012\uffd3\013\uffd3\014\uffd3\024\074\025\075\027\uffd3\030" +
    "\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\001\002\000\040\005\uffd6\007\uffd6\012\uffd6\013\uffd6\014" +
    "\uffd6\024\074\025\075\027\uffd6\030\uffd6\031\uffd6\032\uffd6" +
    "\033\uffd6\034\uffd6\035\uffd6\036\uffd6\001\002\000\040\005" +
    "\uffd4\007\uffd4\012\uffd4\013\uffd4\014\uffd4\024\074\025\075" +
    "\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035" +
    "\uffd4\036\uffd4\001\002\000\040\005\uffd2\007\uffd2\012\uffd2" +
    "\013\uffd2\014\uffd2\024\074\025\075\027\uffd2\030\uffd2\031" +
    "\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\001\002" +
    "\000\042\004\007\006\015\016\034\017\022\026\031\037" +
    "\025\041\026\045\027\050\047\051\011\056\064\057\020" +
    "\060\014\061\053\062\023\063\040\001\002\000\006\007" +
    "\121\036\122\001\002\000\004\013\uffdf\001\002\000\042" +
    "\004\007\006\015\016\034\017\022\026\031\037\025\041" +
    "\026\045\027\050\047\051\011\056\064\057\020\060\014" +
    "\061\053\062\023\063\040\001\002\000\020\005\uffdb\007" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\035\062\036\uffdb\001\002" +
    "\000\046\004\007\006\015\010\046\016\034\017\022\026" +
    "\031\037\025\041\026\044\054\045\027\050\047\051\011" +
    "\056\064\057\020\060\014\061\053\062\023\063\040\001" +
    "\002\000\006\007\uffb1\056\126\001\002\000\006\007\uffb1" +
    "\012\133\001\002\000\004\007\130\001\002\000\046\004" +
    "\007\006\015\010\046\016\034\017\022\026\031\037\025" +
    "\041\026\044\054\045\027\050\047\051\011\056\064\057" +
    "\020\060\014\061\053\062\023\063\040\001\002\000\014" +
    "\005\ufff8\007\ufff8\012\ufff8\013\ufff8\014\ufff8\001\002\000" +
    "\006\007\ufff6\015\ufff6\001\002\000\004\056\135\001\002" +
    "\000\006\007\ufff3\015\ufff3\001\002\000\010\007\uffb1\012" +
    "\133\015\uffb1\001\002\000\006\007\ufff4\015\ufff4\001\002" +
    "\000\014\005\ufff7\007\ufff7\012\ufff7\013\ufff7\014\ufff7\001" +
    "\002\000\006\007\uffb1\056\141\001\002\000\004\015\154" +
    "\001\002\000\004\007\uffe7\001\002\000\006\007\uffb1\012" +
    "\147\001\002\000\004\007\145\001\002\000\046\004\007" +
    "\006\015\010\046\016\034\017\022\026\031\037\025\041" +
    "\026\044\054\045\027\050\047\051\011\056\064\057\020" +
    "\060\014\061\053\062\023\063\040\001\002\000\004\013" +
    "\uffea\001\002\000\004\056\141\001\002\000\004\007\uffe5" +
    "\001\002\000\004\007\uffe8\001\002\000\006\007\uffb1\012" +
    "\147\001\002\000\004\007\uffe6\001\002\000\042\004\007" +
    "\006\015\016\034\017\022\026\031\037\025\041\026\045" +
    "\027\050\047\051\011\056\064\057\020\060\014\061\053" +
    "\062\023\063\040\001\002\000\010\007\uffe9\012\uffe9\036" +
    "\122\001\002\000\062\002\ufffc\004\ufffc\006\ufffc\010\ufffc" +
    "\011\ufffc\015\ufffc\016\ufffc\017\ufffc\026\ufffc\037\ufffc\041" +
    "\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc" +
    "\051\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\063" +
    "\ufffc\001\002\000\004\007\160\001\002\000\060\004\uffdd" +
    "\005\uffdd\006\uffdd\007\uffdd\012\uffdd\013\uffdd\014\uffdd\016" +
    "\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd" +
    "\025\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034" +
    "\uffdd\035\uffdd\036\uffdd\001\002\000\060\004\007\006\015" +
    "\010\046\011\162\015\uffb1\016\034\017\022\026\031\037" +
    "\025\041\026\043\052\044\054\045\027\046\057\047\021" +
    "\050\047\051\011\056\036\057\020\060\014\061\053\062" +
    "\023\063\040\001\002\000\014\005\uffef\007\uffef\012\uffef" +
    "\013\uffef\014\uffef\001\002\000\062\002\uffff\004\uffff\006" +
    "\uffff\010\uffff\011\uffff\015\uffff\016\uffff\017\uffff\026\uffff" +
    "\037\uffff\041\uffff\043\uffff\044\uffff\045\uffff\046\uffff\047" +
    "\uffff\050\uffff\051\uffff\056\uffff\057\uffff\060\uffff\061\uffff" +
    "\062\uffff\063\uffff\001\002\000\062\002\ufffb\004\ufffb\006" +
    "\ufffb\010\ufffb\011\ufffb\015\ufffb\016\ufffb\017\ufffb\026\ufffb" +
    "\037\ufffb\041\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047" +
    "\ufffb\050\ufffb\051\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb" +
    "\062\ufffb\063\ufffb\001\002\000\062\002\ufffa\004\ufffa\006" +
    "\ufffa\010\ufffa\011\ufffa\015\ufffa\016\ufffa\017\ufffa\026\ufffa" +
    "\037\ufffa\041\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047" +
    "\ufffa\050\ufffa\051\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa" +
    "\062\ufffa\063\ufffa\001\002\000\054\005\uffc4\007\uffc4\012" +
    "\uffc4\013\uffc4\014\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4" +
    "\022\uffc4\023\uffc4\024\uffc4\025\uffc4\027\uffc4\030\uffc4\031" +
    "\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\001\002" +
    "\000\042\004\007\006\015\016\034\017\022\026\031\037" +
    "\025\041\026\045\027\050\047\051\011\056\064\057\020" +
    "\060\014\061\053\062\023\063\040\001\002\000\052\005" +
    "\uffc6\007\uffc6\012\uffc6\013\uffc6\014\uffc6\016\uffc6\017\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\024\uffc6\025\uffc6\027\uffc6\030" +
    "\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6" +
    "\001\002\000\050\004\007\006\015\007\uffb1\010\046\016" +
    "\034\017\022\026\031\037\025\041\026\044\054\045\027" +
    "\050\047\051\011\056\064\057\020\060\014\061\053\062" +
    "\023\063\040\001\002\000\042\004\007\006\015\016\034" +
    "\017\022\026\031\037\025\041\026\045\027\050\047\051" +
    "\011\056\064\057\020\060\014\061\053\062\023\063\040" +
    "\001\002\000\006\005\174\036\122\001\002\000\060\004" +
    "\uffe2\005\uffe2\006\uffe2\007\uffe2\012\uffe2\013\uffe2\014\uffe2" +
    "\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024" +
    "\uffe2\025\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2" +
    "\034\uffe2\035\uffe2\036\uffe2\001\002\000\012\005\uffed\007" +
    "\uffed\013\uffed\014\uffed\001\002\000\014\005\uffb1\007\uffb1" +
    "\012\201\013\uffb1\014\uffb1\001\002\000\004\007\200\001" +
    "\002\000\060\004\uffe1\005\uffe1\006\uffe1\007\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\027\uffe1\030\uffe1\031\uffe1" +
    "\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\001\002\000" +
    "\046\004\007\006\015\010\046\016\034\017\022\026\031" +
    "\037\025\041\026\044\054\045\027\050\047\051\011\056" +
    "\064\057\020\060\014\061\053\062\023\063\040\001\002" +
    "\000\012\005\uffee\007\uffee\013\uffee\014\uffee\001\002\000" +
    "\012\005\uffeb\007\uffeb\013\uffeb\014\uffeb\001\002\000\014" +
    "\005\uffb1\007\uffb1\012\201\013\uffb1\014\uffb1\001\002\000" +
    "\012\005\uffec\007\uffec\013\uffec\014\uffec\001\002\000\054" +
    "\005\uffc2\007\uffc2\012\uffc2\013\uffc2\014\uffc2\016\uffc2\017" +
    "\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2" +
    "\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035" +
    "\uffc2\036\uffc2\001\002\000\032\004\007\006\015\041\026" +
    "\045\027\050\047\051\011\056\064\057\020\060\014\061" +
    "\053\062\023\063\040\001\002\000\010\004\172\006\171" +
    "\012\211\001\002\000\050\004\007\006\015\007\uffb1\010" +
    "\046\016\034\017\022\026\031\037\025\041\026\044\054" +
    "\045\027\050\047\051\011\056\064\057\020\060\014\061" +
    "\053\062\023\063\040\001\002\000\004\007\213\001\002" +
    "\000\060\004\uffe0\005\uffe0\006\uffe0\007\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\025\uffe0\027\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\001\002\000\054" +
    "\005\uffc1\007\uffc1\012\uffc1\013\uffc1\014\uffc1\016\uffc1\017" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035" +
    "\uffc1\036\uffc1\001\002\000\054\005\uffc3\007\uffc3\012\uffc3" +
    "\013\uffc3\014\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022" +
    "\uffc3\023\uffc3\024\uffc3\025\uffc3\027\uffc3\030\uffc3\031\uffc3" +
    "\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\001\002\000" +
    "\042\004\007\006\015\016\034\017\022\026\031\037\025" +
    "\041\026\045\027\050\047\051\011\056\064\057\020\060" +
    "\014\061\053\062\023\063\040\001\002\000\006\007\220" +
    "\036\122\001\002\000\004\013\uffde\001\002\000\004\007" +
    "\222\001\002\000\060\004\uffb8\005\uffb8\006\uffb8\007\uffb8" +
    "\012\uffb8\013\uffb8\014\uffb8\016\uffb8\017\uffb8\020\uffb8\021" +
    "\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\027\uffb8\030\uffb8" +
    "\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\001" +
    "\002\000\050\004\007\006\015\010\046\013\uffb1\016\034" +
    "\017\022\026\031\037\025\041\026\044\054\045\027\050" +
    "\047\051\011\056\064\057\020\060\014\061\053\062\023" +
    "\063\040\001\002\000\004\013\225\001\002\000\062\002" +
    "\ufff9\004\ufff9\006\ufff9\010\ufff9\011\ufff9\015\ufff9\016\ufff9" +
    "\017\ufff9\026\ufff9\037\ufff9\041\ufff9\043\ufff9\044\ufff9\045" +
    "\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\056\ufff9\057\ufff9" +
    "\060\ufff9\061\ufff9\062\ufff9\063\ufff9\001\002\000\004\007" +
    "\227\001\002\000\060\004\uffdc\005\uffdc\006\uffdc\007\uffdc" +
    "\012\uffdc\013\uffdc\014\uffdc\016\uffdc\017\uffdc\020\uffdc\021" +
    "\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\001" +
    "\002\000\050\004\007\006\015\010\046\014\uffb1\016\034" +
    "\017\022\026\031\037\025\041\026\044\054\045\027\050" +
    "\047\051\011\056\064\057\020\060\014\061\053\062\023" +
    "\063\040\001\002\000\004\005\232\001\002\000\060\004" +
    "\uffe4\005\uffe4\006\uffe4\007\uffe4\012\uffe4\013\uffe4\014\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4" +
    "\034\uffe4\035\uffe4\036\uffe4\001\002\000\004\014\234\001" +
    "\002\000\004\005\235\001\002\000\060\004\uffe3\005\uffe3" +
    "\006\uffe3\007\uffe3\012\uffe3\013\uffe3\014\uffe3\016\uffe3\017" +
    "\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035" +
    "\uffe3\036\uffe3\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\064\002\023\003\042\004\041\005\004\006" +
    "\007\007\057\010\027\011\036\013\012\022\040\023\005" +
    "\024\050\027\055\030\047\031\034\032\060\033\016\034" +
    "\011\035\044\036\043\037\054\040\032\041\031\042\015" +
    "\043\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\002\023\003\042\004\041\011\175" +
    "\015\230\023\005\024\050\027\055\031\034\032\060\033" +
    "\016\034\011\035\044\036\043\037\054\040\032\041\031" +
    "\042\015\043\174\001\001\000\060\002\023\003\042\004" +
    "\041\007\162\010\027\011\036\013\012\022\040\023\005" +
    "\024\050\027\055\030\047\031\034\032\060\033\016\034" +
    "\011\035\044\036\043\037\054\040\032\041\031\042\015" +
    "\043\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\002\023\003\042" +
    "\004\041\011\220\023\005\024\050\027\055\031\034\032" +
    "\060\033\016\034\011\035\044\036\043\037\054\040\032" +
    "\041\031\042\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\002\023" +
    "\003\042\004\041\024\050\027\055\040\214\041\031\042" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\002\023\003\042\004\041\024\050\027\055\040\213\041" +
    "\031\042\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\002\023\003\042\004\041\024" +
    "\050\027\055\040\205\041\031\042\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\002\023\003\042\004" +
    "\041\024\050\027\055\040\165\041\031\042\015\001\001" +
    "\000\002\001\001\000\006\014\131\043\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\002\023\003\042\004\041\006\160\007\057" +
    "\010\027\011\036\013\012\022\040\023\005\024\050\027" +
    "\055\030\047\031\034\032\060\033\016\034\011\035\044" +
    "\036\043\037\054\040\032\041\031\042\015\043\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\002\023\003\042\004" +
    "\041\024\050\027\055\033\062\034\011\035\044\036\043" +
    "\037\054\040\032\041\031\042\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\002\023\003\042\004\041" +
    "\024\050\027\055\034\115\035\044\036\043\037\054\040" +
    "\032\041\031\042\015\001\001\000\032\002\023\003\042" +
    "\004\041\024\050\027\055\034\114\035\044\036\043\037" +
    "\054\040\032\041\031\042\015\001\001\000\032\002\023" +
    "\003\042\004\041\024\050\027\055\034\113\035\044\036" +
    "\043\037\054\040\032\041\031\042\015\001\001\000\032" +
    "\002\023\003\042\004\041\024\050\027\055\034\112\035" +
    "\044\036\043\037\054\040\032\041\031\042\015\001\001" +
    "\000\032\002\023\003\042\004\041\024\050\027\055\034" +
    "\111\035\044\036\043\037\054\040\032\041\031\042\015" +
    "\001\001\000\032\002\023\003\042\004\041\024\050\027" +
    "\055\034\072\035\044\036\043\037\054\040\032\041\031" +
    "\042\015\001\001\000\002\001\001\000\030\002\023\003" +
    "\042\004\041\024\050\027\055\035\110\036\043\037\054" +
    "\040\032\041\031\042\015\001\001\000\030\002\023\003" +
    "\042\004\041\024\050\027\055\035\075\036\043\037\054" +
    "\040\032\041\031\042\015\001\001\000\002\001\001\000" +
    "\026\002\023\003\042\004\041\024\050\027\055\036\107" +
    "\037\054\040\032\041\031\042\015\001\001\000\026\002" +
    "\023\003\042\004\041\024\050\027\055\036\100\037\054" +
    "\040\032\041\031\042\015\001\001\000\002\001\001\000" +
    "\024\002\023\003\042\004\041\024\050\027\055\037\106" +
    "\040\032\041\031\042\015\001\001\000\024\002\023\003" +
    "\042\004\041\024\050\027\055\037\105\040\032\041\031" +
    "\042\015\001\001\000\024\002\023\003\042\004\041\024" +
    "\050\027\055\037\104\040\032\041\031\042\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\002\023\003\042\004\041\024\050\027\055" +
    "\031\117\032\060\033\016\034\011\035\044\036\043\037" +
    "\054\040\032\041\031\042\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\002\023\003\042\004\041\024" +
    "\050\027\055\032\122\033\016\034\011\035\044\036\043" +
    "\037\054\040\032\041\031\042\015\001\001\000\002\001" +
    "\001\000\044\002\023\003\042\004\041\011\136\023\005" +
    "\024\050\027\055\031\034\032\060\033\016\034\011\035" +
    "\044\036\043\037\054\040\032\041\031\042\015\001\001" +
    "\000\006\013\126\043\003\001\001\000\006\014\131\043" +
    "\133\001\001\000\002\001\001\000\044\002\023\003\042" +
    "\004\041\011\130\023\005\024\050\027\055\031\034\032" +
    "\060\033\016\034\011\035\044\036\043\037\054\040\032" +
    "\041\031\042\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\135" +
    "\043\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\142\020\143\043\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\150\043\147\001\001\000" +
    "\002\001\001\000\044\002\023\003\042\004\041\011\145" +
    "\023\005\024\050\027\055\031\034\032\060\033\016\034" +
    "\011\035\044\036\043\037\054\040\032\041\031\042\015" +
    "\001\001\000\002\001\001\000\004\017\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\152\043\147" +
    "\001\001\000\002\001\001\000\040\002\023\003\042\004" +
    "\041\024\050\027\055\031\154\032\060\033\016\034\011" +
    "\035\044\036\043\037\054\040\032\041\031\042\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\002\023\003\042\004\041\007" +
    "\162\010\027\011\036\013\012\022\040\023\005\024\050" +
    "\027\055\030\047\031\034\032\060\033\016\034\011\035" +
    "\044\036\043\037\054\040\032\041\031\042\015\043\003" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\002\023" +
    "\003\042\004\041\024\050\027\055\037\167\040\032\041" +
    "\031\042\015\001\001\000\002\001\001\000\050\002\023" +
    "\003\042\004\041\011\175\015\176\023\005\024\050\027" +
    "\055\031\034\032\060\033\016\034\011\035\044\036\043" +
    "\037\054\040\032\041\031\042\015\043\174\001\001\000" +
    "\040\002\023\003\042\004\041\024\050\027\055\031\172" +
    "\032\060\033\016\034\011\035\044\036\043\037\054\040" +
    "\032\041\031\042\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\201\043\202\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\002\023" +
    "\003\042\004\041\011\203\023\005\024\050\027\055\031" +
    "\034\032\060\033\016\034\011\035\044\036\043\037\054" +
    "\040\032\041\031\042\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\204\043\202\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\002\023\003\042\004" +
    "\041\024\050\027\055\041\207\042\015\001\001\000\002" +
    "\001\001\000\050\002\023\003\042\004\041\011\175\015" +
    "\211\023\005\024\050\027\055\031\034\032\060\033\016" +
    "\034\011\035\044\036\043\037\054\040\032\041\031\042" +
    "\015\043\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\002\023\003" +
    "\042\004\041\024\050\027\055\031\216\032\060\033\016" +
    "\034\011\035\044\036\043\037\054\040\032\041\031\042" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\002\023\003\042\004" +
    "\041\011\175\015\223\023\005\024\050\027\055\031\034" +
    "\032\060\033\016\034\011\035\044\036\043\037\054\040" +
    "\032\041\031\042\015\043\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\002\023\003\042\004\041\011\175\015\232\023\005" +
    "\024\050\027\055\031\034\032\060\033\016\034\011\035" +
    "\044\036\043\037\054\040\032\041\031\042\015\043\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SMPLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SMPLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SMPLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    String msg = "Line " + lexer.getLine() + ", pos " +
				       lexer.getColumn() +
				       ": Unrecognised token <" +
                       lexer.getText() + ">";
		    throw new SMPLSyntaxException(msg, ioe);
		}
	  
    }


		SMPLLexer lexer;

		public SMPLParser(SMPLLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.println("Line " + lexer.getLine());

            int column = lexer.getColumn();

            for (int i = 0; i < column; i++) {
                System.err.print(lexer.yycharat(i));
            }
            System.err.println();

            // print an indicator on screen that will show the user
            // where the error is
            String indicator = String.format("%" + lexer.getColumn() + "s","^");
            System.err.println(indicator);

		    report_error("Syntax error", cur_token);
		}
	    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SMPLParser$actions {
  private final SMPLParser parser;

  /** Constructor */
  CUP$SMPLParser$actions(SMPLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action_part00000000(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SMPLParser$result;

      /* select the action based on the action number */
      switch (CUP$SMPLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              SMPLProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLProgram(s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("program",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLProgram start_val = (SMPLProgram)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		RESULT = start_val;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SMPLParser$parser.done_parsing();
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                lst.add(s); 
                RESULT = lst;
		     
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		        RESULT = new StmtSequence(s);
		     
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= assignment 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtAssignment a = (StmtAssignment)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = a; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= outStmt SEMI 
            {
              Statement RESULT =null;
		int ioleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int ioright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Statement io = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = io; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= letStmt SEMI 
            {
              Statement RESULT =null;
		int letleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int letright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtLet let = (StmtLet)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = let; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= expression SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new Statement(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // assignment ::= IDs ASSIGN expressions SEMI 
            {
              StmtAssignment RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		ArrayList<String> id = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ExpSequence e = (ExpSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
		            RESULT = new StmtAssignment(id, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // procExp ::= PROC LPAREN IDs RPAREN expression 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> p = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpProcedure(p, body); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procExp",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // procExp ::= PROC ID expression 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpProcedure(id, body);
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procExp",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IDs ::= ID IDList 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int idlleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<String> idl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                idl.add(0, id);
                RESULT = idl;
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("IDs",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IDs ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("IDs",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IDList ::= COMMA ID IDList 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int idlleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<String> idl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                idl.add(0, id);
                RESULT = idl;
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("IDList",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IDList ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("IDList",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // multiExp ::= LPAREN expressions RPAREN 
            {
              Exp RESULT =null;
		int expsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ExpSequence exps = (ExpSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new MultiExp(exps); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("multiExp",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression ::= logicExp 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expression ::= procExp 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expression ::= LBRACE stmtList RBRACE 
            {
              Exp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = body; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expressions ::= expression expressionList 
            {
              ExpSequence RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ExpSequence el = (ExpSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                    el.add(e);
                    RESULT = el;
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expressions ::= empty 
            {
              ExpSequence RESULT =null;
		 RESULT = new ExpSequence(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expressionList ::= COMMA expression expressionList 
            {
              ExpSequence RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ExpSequence el = (ExpSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                        el.add(e);
                        RESULT = el;
                    
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressionList",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expressionList ::= empty 
            {
              ExpSequence RESULT =null;
		 RESULT = new ExpSequence(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressionList",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // letStmt ::= LET LPAREN bindings RPAREN expression 
            {
              StmtLet RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<Binding> bs = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		        RESULT = new StmtLet(bs, body); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("letStmt",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // binding ::= ID ASSIGN logicExp 
            {
              Binding RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new Binding(v, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("binding",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bindings ::= binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                bl.add(0,b);
                RESULT = bl;
             
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindings",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bindings ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindings",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bindingsAux ::= COMMA binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                    bl.add(0,b);
                    RESULT = bl;
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bindingsAux ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // listExp ::= LBRACKET expressions RBRACKET 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ExpSequence e = (ExpSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                RESULT = new ExpList(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("listExp",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // vecExp ::= LBRACKET COLON expressions COLON RBRACKET 
            {
              ExpVector RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ExpSequence e = (ExpSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		
                RESULT = new ExpVector(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("vecExp",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // indexVecExp ::= primary LBRACKET logicExp RBRACKET 
            {
              ExpIndexVector RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                    RESULT = new ExpIndexVector(p, n); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("indexVecExp",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // callExp ::= primary LPAREN expressions RPAREN 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ExpSequence e = (ExpSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                RESULT = new ExpCall(p, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("callExp",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // callExp ::= CALL LPAREN primary COMMA expressions RPAREN 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ExpSequence e = (ExpSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                RESULT =  new ExpCall(p, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("callExp",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // outStmt ::= PRINT LPAREN logicExp RPAREN 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                RESULT = new StmtPrint(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("outStmt",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // outStmt ::= PRINTLN LPAREN logicExp RPAREN 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                RESULT = new StmtPrintLn(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("outStmt",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // inStmt ::= READ LPAREN RPAREN 
            {
              Statement RESULT =null;
		
                RESULT = new StmtRead(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("inStmt",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // inStmt ::= READINT LPAREN RPAREN 
            {
              Statement RESULT =null;
		
                RESULT = new StmtReadInt(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("inStmt",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // logicExp ::= logicExp OR orComp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp o = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpOr(e, o); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logicExp",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // logicExp ::= orComp 
            {
              Exp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp o = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = o; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logicExp",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // orComp ::= orComp AND relExp 
            {
              Exp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp o = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpAnd(o, r); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("orComp",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // orComp ::= relExp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = r; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("orComp",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // relExp ::= relExp NEQ bitExp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpNEQ(r, b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relExp",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // relExp ::= relExp GTEQ bitExp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpGTEQ(r, b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relExp",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // relExp ::= relExp LTEQ bitExp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpLTEQ(r, b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relExp",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // relExp ::= relExp LT bitExp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpLT(r, b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relExp",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // relExp ::= relExp GT bitExp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpGT(r, b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relExp",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // relExp ::= relExp EQ bitExp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpEQ(r, b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relExp",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // relExp ::= bitExp 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = b; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relExp",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bitExp ::= bitExp BOR arithExp 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpBOR(b, a); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitExp",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bitExp ::= bitExp BAND arithExp 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpBAND(b, a); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitExp",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bitExp ::= arithExp 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = a; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitExp",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arithExp ::= arithExp PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpAdd(e, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // arithExp ::= arithExp MINUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpSub(e, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arithExp ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // term ::= term MUL factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		    RESULT = new ExpMul(t, f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",28, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // term ::= term DIV factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		    RESULT = new ExpDiv(t, f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",28, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // term ::= term MOD factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		    RESULT = new ExpMod(t, f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",28, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // term ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",28, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= unary POW factor 
            {
              Exp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp u = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            RESULT = new ExpPow(u, f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // factor ::= unary 
            {
              Exp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp u = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = u; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // unary ::= PLUS unary 
            {
              Exp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp u = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpUnary("+", u); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("unary",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // unary ::= MINUS unary 
            {
              Exp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp u = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpUnary("-", u); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("unary",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // unary ::= BNOT unary 
            {
              Exp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp u = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpBNOT(u); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("unary",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // unary ::= NOT unary 
            {
              Exp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp u = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpNot(u); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("unary",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // unary ::= primary 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("unary",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // primary ::= literal 
            {
              Exp RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLValue< ? > lit = (SMPLValue< ? >)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLit(lit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("primary",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // primary ::= ID 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpId(id); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("primary",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // primary ::= callExp 
            {
              Exp RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp cl = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = cl; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("primary",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // primary ::= vecExp 
            {
              Exp RESULT =null;
		int vecleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vecright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ExpVector vec = (ExpVector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = vec; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("primary",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // primary ::= indexVecExp 
            {
              Exp RESULT =null;
		int ivecleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int ivecright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ExpIndexVector ivec = (ExpIndexVector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = ivec; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("primary",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // primary ::= listExp 
            {
              Exp RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ExpList lst = (ExpList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("primary",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // primary ::= inStmt 
            {
              Exp RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement in = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = in; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("primary",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // primary ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("primary",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // literal ::= INT 
            {
              SMPLValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = SMPLValue.make(ilit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literal",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // literal ::= DOUBLE 
            {
              SMPLValue< ? > RESULT =null;
		int dlitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int dlitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Double dlit = (Double)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = SMPLValue.make(dlit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literal",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // literal ::= STRING 
            {
              SMPLValue< ? > RESULT =null;
		int slitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String slit = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = SMPLValue.make(slit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literal",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // literal ::= CHARACTER 
            {
              SMPLValue< ? > RESULT =null;
		int chlitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int chlitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Character chlit = (Character)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = SMPLValue.make(chlit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literal",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // literal ::= BOOLEAN 
            {
              SMPLValue< ? > RESULT =null;
		int blitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int blitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Boolean blit = (Boolean)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = SMPLValue.make(blit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literal",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // literal ::= NIL 
            {
              SMPLValue< ? > RESULT =null;
		int nilleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int nilright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Object nil = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLPair(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literal",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // empty ::= 
            {
              Object RESULT =null;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("empty",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SMPLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
              return CUP$SMPLParser$do_action_part00000000(
                               CUP$SMPLParser$act_num,
                               CUP$SMPLParser$parser,
                               CUP$SMPLParser$stack,
                               CUP$SMPLParser$top);
    }
}

}
