
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package smpl.syntax.parser;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import smpl.exceptions.SMPLSyntaxException;
import smpl.syntax.Binding;
import smpl.syntax.CaseClause;
import smpl.syntax.lexer.SMPLLexer;
import smpl.syntax.ast.core.Exp;
import smpl.syntax.ast.core.SMPLProgram;
import smpl.syntax.ast.*;
import smpl.types.SMPLValue;
import smpl.types.compound.SMPLPair;
import smpl.types.compound.SMPLVector;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SMPLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SMPLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SMPLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\005\003\000\002\002\004\000\002\006" +
    "\004\000\002\006\003\000\002\007\004\000\002\007\003" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\007\003\000\002\007\004\000\002\024\006\000\002" +
    "\024\010\000\002\025\006\000\002\026\005\000\002\027" +
    "\004\000\002\027\003\000\002\030\005\000\002\030\003" +
    "\000\002\010\005\000\002\011\005\000\002\031\007\000" +
    "\002\031\005\000\002\014\004\000\002\014\003\000\002" +
    "\015\005\000\002\015\003\000\002\013\005\000\002\012" +
    "\003\000\002\012\003\000\002\012\005\000\002\016\004" +
    "\000\002\016\003\000\002\017\005\000\002\017\003\000" +
    "\002\023\007\000\002\020\005\000\002\021\004\000\002" +
    "\021\003\000\002\022\005\000\002\022\003\000\002\002" +
    "\005\000\002\003\007\000\002\004\006\000\002\032\006" +
    "\000\002\032\010\000\002\034\006\000\002\034\006\000" +
    "\002\033\005\000\002\033\005\000\002\035\005\000\002" +
    "\035\003\000\002\036\005\000\002\036\003\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\037\005" +
    "\000\002\037\005\000\002\037\005\000\002\037\003\000" +
    "\002\040\005\000\002\040\005\000\002\040\003\000\002" +
    "\041\005\000\002\041\005\000\002\041\003\000\002\042" +
    "\005\000\002\042\005\000\002\042\005\000\002\042\003" +
    "\000\002\043\005\000\002\043\003\000\002\044\004\000" +
    "\002\044\004\000\002\044\004\000\002\044\004\000\002" +
    "\044\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\005\000\002\046\003\000" +
    "\002\046\003\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\047\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\064\004\007\006\017\010\053\015\uffa5\016" +
    "\037\017\024\026\034\037\027\041\032\042\062\043\057" +
    "\044\060\045\033\046\065\047\023\050\054\051\012\052" +
    "\040\055\015\056\042\057\022\060\016\061\061\062\025" +
    "\063\044\001\002\000\006\007\uffe9\015\uffe9\001\002\000" +
    "\004\002\271\001\002\000\020\005\uffe4\007\uffe4\011\uffe4" +
    "\012\uffe4\013\uffe4\014\uffe4\054\uffe4\001\002\000\052\004" +
    "\007\005\uffa5\006\017\010\053\014\263\016\037\017\024" +
    "\026\034\037\027\041\032\044\060\045\033\050\054\051" +
    "\012\056\072\057\022\060\016\061\061\062\025\063\044" +
    "\001\002\000\066\002\001\004\007\006\017\010\053\015" +
    "\uffa5\016\037\017\024\026\034\037\027\041\032\042\062" +
    "\043\057\044\060\045\033\046\065\047\023\050\054\051" +
    "\012\052\040\055\015\056\042\057\022\060\016\061\061" +
    "\062\025\063\044\001\002\000\004\013\262\001\002\000" +
    "\004\006\260\001\002\000\046\005\uffc5\007\uffc5\011\uffc5" +
    "\012\uffc5\013\uffc5\014\uffc5\024\102\025\103\027\uffc5\030" +
    "\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5" +
    "\053\uffc5\054\uffc5\001\002\000\004\015\256\001\002\000" +
    "\004\010\241\001\002\000\066\004\uffaa\005\uffaa\006\uffaa" +
    "\007\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\016\uffaa\017" +
    "\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa" +
    "\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035" +
    "\uffaa\036\uffaa\053\uffaa\054\uffaa\001\002\000\046\004\007" +
    "\006\017\010\053\016\037\017\024\026\034\037\027\041" +
    "\032\044\060\045\033\050\054\051\012\056\072\057\022" +
    "\060\016\061\061\062\025\063\044\001\002\000\066\004" +
    "\uffb3\005\uffb3\006\uffb3\007\uffb3\011\uffb3\012\uffb3\013\uffb3" +
    "\014\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023" +
    "\uffb3\024\uffb3\025\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3" +
    "\033\uffb3\034\uffb3\035\uffb3\036\uffb3\053\uffb3\054\uffb3\001" +
    "\002\000\042\005\uffcc\007\uffcc\011\uffcc\012\uffcc\013\uffcc" +
    "\014\uffcc\027\073\030\076\031\074\032\100\033\075\034" +
    "\077\035\uffcc\036\uffcc\053\uffcc\054\uffcc\001\002\000\066" +
    "\004\uffab\005\uffab\006\uffab\007\uffab\011\uffab\012\uffab\013" +
    "\uffab\014\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab" +
    "\023\uffab\024\uffab\025\uffab\027\uffab\030\uffab\031\uffab\032" +
    "\uffab\033\uffab\034\uffab\035\uffab\036\uffab\053\uffab\054\uffab" +
    "\001\002\000\004\006\234\001\002\000\042\004\007\006" +
    "\017\016\037\017\024\026\034\037\027\041\032\045\033" +
    "\050\054\051\012\056\072\057\022\060\016\061\061\062" +
    "\025\063\044\001\002\000\066\004\uffa8\005\uffa8\006\uffa8" +
    "\007\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\016\uffa8\017" +
    "\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8" +
    "\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035" +
    "\uffa8\036\uffa8\053\uffa8\054\uffa8\001\002\000\066\004\uffae" +
    "\005\uffae\006\uffae\007\uffae\011\uffae\012\uffae\013\uffae\014" +
    "\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae" +
    "\024\uffae\025\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033" +
    "\uffae\034\uffae\035\uffae\036\uffae\053\uffae\054\uffae\001\002" +
    "\000\042\004\007\006\017\016\037\017\024\026\034\037" +
    "\027\041\032\045\033\050\054\051\012\056\072\057\022" +
    "\060\016\061\061\062\025\063\044\001\002\000\104\002" +
    "\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc" +
    "\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\026" +
    "\ufffc\037\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc" +
    "\046\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\054\ufffc\055" +
    "\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc" +
    "\001\002\000\004\013\231\001\002\000\066\004\uffa6\005" +
    "\uffa6\006\uffa6\007\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6" +
    "\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024" +
    "\uffa6\025\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6" +
    "\034\uffa6\035\uffa6\036\uffa6\053\uffa6\054\uffa6\001\002\000" +
    "\004\006\224\001\002\000\042\004\007\006\017\016\037" +
    "\017\024\026\034\037\027\041\032\045\033\050\054\051" +
    "\012\056\072\057\022\060\016\061\061\062\025\063\044" +
    "\001\002\000\066\004\207\005\uffb4\006\206\007\uffb4\011" +
    "\uffb4\012\uffb4\013\uffb4\014\uffb4\016\uffb4\017\uffb4\020\uffb4" +
    "\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\027\uffb4\030" +
    "\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4" +
    "\053\uffb4\054\uffb4\001\002\000\062\005\uffb9\007\uffb9\011" +
    "\uffb9\012\uffb9\013\uffb9\014\uffb9\016\uffb9\017\uffb9\020\uffb9" +
    "\021\uffb9\022\uffb9\023\204\024\uffb9\025\uffb9\027\uffb9\030" +
    "\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9" +
    "\053\uffb9\054\uffb9\001\002\000\042\004\007\006\017\016" +
    "\037\017\024\026\034\037\027\041\032\045\033\050\054" +
    "\051\012\056\072\057\022\060\016\061\061\062\025\063" +
    "\044\001\002\000\042\004\007\006\017\016\037\017\024" +
    "\026\034\037\027\041\032\045\033\050\054\051\012\056" +
    "\072\057\022\060\016\061\061\062\025\063\044\001\002" +
    "\000\022\005\uffe5\007\uffe5\011\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\036\164\054\uffe5\001\002\000\054\004\uffb2\006\uffb2" +
    "\012\140\013\uffb2\015\uffa5\016\uffb2\017\uffb2\020\uffb2\021" +
    "\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\027\uffb2\030\uffb2" +
    "\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\001" +
    "\002\000\004\013\175\001\002\000\066\004\uffa7\005\uffa7" +
    "\006\uffa7\007\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\016" +
    "\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7" +
    "\025\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034" +
    "\uffa7\035\uffa7\036\uffa7\053\uffa7\054\uffa7\001\002\000\004" +
    "\013\174\001\002\000\066\004\uffaf\005\uffaf\006\uffaf\007" +
    "\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\016\uffaf\017\uffaf" +
    "\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\027" +
    "\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf" +
    "\036\uffaf\053\uffaf\054\uffaf\001\002\000\104\002\ufff8\004" +
    "\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8" +
    "\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\026\ufff8\037" +
    "\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8" +
    "\047\ufff8\050\ufff8\051\ufff8\052\ufff8\054\ufff8\055\ufff8\056" +
    "\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\001\002" +
    "\000\066\004\uffb0\005\uffb0\006\uffb0\007\uffb0\011\uffb0\012" +
    "\uffb0\013\uffb0\014\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0" +
    "\022\uffb0\023\uffb0\024\uffb0\025\uffb0\027\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\053\uffb0" +
    "\054\uffb0\001\002\000\060\005\uffbf\007\uffbf\011\uffbf\012" +
    "\uffbf\013\uffbf\014\uffbf\016\uffbf\017\uffbf\020\111\021\112" +
    "\022\110\024\uffbf\025\uffbf\027\uffbf\030\uffbf\031\uffbf\032" +
    "\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\053\uffbf\054\uffbf" +
    "\001\002\000\052\005\uffc2\007\uffc2\011\uffc2\012\uffc2\013" +
    "\uffc2\014\uffc2\016\105\017\106\024\uffc2\025\uffc2\027\uffc2" +
    "\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036" +
    "\uffc2\053\uffc2\054\uffc2\001\002\000\064\004\007\006\017" +
    "\010\053\015\uffa5\016\037\017\024\026\034\037\027\041" +
    "\032\042\062\043\057\044\060\045\033\046\065\047\023" +
    "\050\054\051\012\052\040\055\015\056\042\057\022\060" +
    "\016\061\061\062\025\063\044\001\002\000\004\006\167" +
    "\001\002\000\004\013\166\001\002\000\066\004\uffb1\005" +
    "\uffb1\006\uffb1\007\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1" +
    "\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024" +
    "\uffb1\025\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1" +
    "\034\uffb1\035\uffb1\036\uffb1\053\uffb1\054\uffb1\001\002\000" +
    "\004\006\146\001\002\000\006\006\133\056\132\001\002" +
    "\000\066\004\uffa9\005\uffa9\006\uffa9\007\uffa9\011\uffa9\012" +
    "\uffa9\013\uffa9\014\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9" +
    "\022\uffa9\023\uffa9\024\uffa9\025\uffa9\027\uffa9\030\uffa9\031" +
    "\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\053\uffa9" +
    "\054\uffa9\001\002\000\004\056\130\001\002\000\060\005" +
    "\uffbb\007\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\016\uffbb" +
    "\017\uffbb\020\uffbb\021\uffbb\022\uffbb\024\uffbb\025\uffbb\027" +
    "\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb" +
    "\036\uffbb\053\uffbb\054\uffbb\001\002\000\066\004\uffad\005" +
    "\uffad\006\uffad\007\uffad\011\uffad\012\uffad\013\uffad\014\uffad" +
    "\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024" +
    "\uffad\025\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad" +
    "\034\uffad\035\uffad\036\uffad\053\uffad\054\uffad\001\002\000" +
    "\004\006\125\001\002\000\026\005\uffce\007\uffce\011\uffce" +
    "\012\uffce\013\uffce\014\uffce\035\070\036\uffce\053\uffce\054" +
    "\uffce\001\002\000\070\002\ufffe\004\ufffe\006\ufffe\010\ufffe" +
    "\011\ufffe\015\ufffe\016\ufffe\017\ufffe\026\ufffe\037\ufffe\041" +
    "\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe" +
    "\050\ufffe\051\ufffe\052\ufffe\055\ufffe\056\ufffe\057\ufffe\060" +
    "\ufffe\061\ufffe\062\ufffe\063\ufffe\001\002\000\042\004\007" +
    "\006\017\016\037\017\024\026\034\037\027\041\032\045" +
    "\033\050\054\051\012\056\072\057\022\060\016\061\061" +
    "\062\025\063\044\001\002\000\042\005\uffcd\007\uffcd\011" +
    "\uffcd\012\uffcd\013\uffcd\014\uffcd\027\073\030\076\031\074" +
    "\032\100\033\075\034\077\035\uffcd\036\uffcd\053\uffcd\054" +
    "\uffcd\001\002\000\066\004\uffb2\005\uffb2\006\uffb2\007\uffb2" +
    "\011\uffb2\012\uffb2\013\uffb2\014\uffb2\016\uffb2\017\uffb2\020" +
    "\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\027\uffb2" +
    "\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036" +
    "\uffb2\053\uffb2\054\uffb2\001\002\000\042\004\007\006\017" +
    "\016\037\017\024\026\034\037\027\041\032\045\033\050" +
    "\054\051\012\056\072\057\022\060\016\061\061\062\025" +
    "\063\044\001\002\000\042\004\007\006\017\016\037\017" +
    "\024\026\034\037\027\041\032\045\033\050\054\051\012" +
    "\056\072\057\022\060\016\061\061\062\025\063\044\001" +
    "\002\000\042\004\007\006\017\016\037\017\024\026\034" +
    "\037\027\041\032\045\033\050\054\051\012\056\072\057" +
    "\022\060\016\061\061\062\025\063\044\001\002\000\042" +
    "\004\007\006\017\016\037\017\024\026\034\037\027\041" +
    "\032\045\033\050\054\051\012\056\072\057\022\060\016" +
    "\061\061\062\025\063\044\001\002\000\042\004\007\006" +
    "\017\016\037\017\024\026\034\037\027\041\032\045\033" +
    "\050\054\051\012\056\072\057\022\060\016\061\061\062" +
    "\025\063\044\001\002\000\042\004\007\006\017\016\037" +
    "\017\024\026\034\037\027\041\032\045\033\050\054\051" +
    "\012\056\072\057\022\060\016\061\061\062\025\063\044" +
    "\001\002\000\046\005\uffc9\007\uffc9\011\uffc9\012\uffc9\013" +
    "\uffc9\014\uffc9\024\102\025\103\027\uffc9\030\uffc9\031\uffc9" +
    "\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\053\uffc9\054" +
    "\uffc9\001\002\000\042\004\007\006\017\016\037\017\024" +
    "\026\034\037\027\041\032\045\033\050\054\051\012\056" +
    "\072\057\022\060\016\061\061\062\025\063\044\001\002" +
    "\000\042\004\007\006\017\016\037\017\024\026\034\037" +
    "\027\041\032\045\033\050\054\051\012\056\072\057\022" +
    "\060\016\061\061\062\025\063\044\001\002\000\052\005" +
    "\uffc4\007\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\016\105" +
    "\017\106\024\uffc4\025\uffc4\027\uffc4\030\uffc4\031\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\053\uffc4\054\uffc4" +
    "\001\002\000\042\004\007\006\017\016\037\017\024\026" +
    "\034\037\027\041\032\045\033\050\054\051\012\056\072" +
    "\057\022\060\016\061\061\062\025\063\044\001\002\000" +
    "\042\004\007\006\017\016\037\017\024\026\034\037\027" +
    "\041\032\045\033\050\054\051\012\056\072\057\022\060" +
    "\016\061\061\062\025\063\044\001\002\000\060\005\uffc0" +
    "\007\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\016\uffc0\017" +
    "\uffc0\020\111\021\112\022\110\024\uffc0\025\uffc0\027\uffc0" +
    "\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036" +
    "\uffc0\053\uffc0\054\uffc0\001\002\000\042\004\007\006\017" +
    "\016\037\017\024\026\034\037\027\041\032\045\033\050" +
    "\054\051\012\056\072\057\022\060\016\061\061\062\025" +
    "\063\044\001\002\000\042\004\007\006\017\016\037\017" +
    "\024\026\034\037\027\041\032\045\033\050\054\051\012" +
    "\056\072\057\022\060\016\061\061\062\025\063\044\001" +
    "\002\000\042\004\007\006\017\016\037\017\024\026\034" +
    "\037\027\041\032\045\033\050\054\051\012\056\072\057" +
    "\022\060\016\061\061\062\025\063\044\001\002\000\060" +
    "\005\uffbd\007\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\016" +
    "\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\024\uffbd\025\uffbd" +
    "\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035" +
    "\uffbd\036\uffbd\053\uffbd\054\uffbd\001\002\000\060\005\uffbe" +
    "\007\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\016\uffbe\017" +
    "\uffbe\020\uffbe\021\uffbe\022\uffbe\024\uffbe\025\uffbe\027\uffbe" +
    "\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036" +
    "\uffbe\053\uffbe\054\uffbe\001\002\000\060\005\uffbc\007\uffbc" +
    "\011\uffbc\012\uffbc\013\uffbc\014\uffbc\016\uffbc\017\uffbc\020" +
    "\uffbc\021\uffbc\022\uffbc\024\uffbc\025\uffbc\027\uffbc\030\uffbc" +
    "\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\053" +
    "\uffbc\054\uffbc\001\002\000\060\005\uffc1\007\uffc1\011\uffc1" +
    "\012\uffc1\013\uffc1\014\uffc1\016\uffc1\017\uffc1\020\111\021" +
    "\112\022\110\024\uffc1\025\uffc1\027\uffc1\030\uffc1\031\uffc1" +
    "\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\053\uffc1\054" +
    "\uffc1\001\002\000\052\005\uffc3\007\uffc3\011\uffc3\012\uffc3" +
    "\013\uffc3\014\uffc3\016\105\017\106\024\uffc3\025\uffc3\027" +
    "\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3" +
    "\036\uffc3\053\uffc3\054\uffc3\001\002\000\046\005\uffcb\007" +
    "\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\024\102\025\103" +
    "\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035" +
    "\uffcb\036\uffcb\053\uffcb\054\uffcb\001\002\000\046\005\uffc7" +
    "\007\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\024\102\025" +
    "\103\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7" +
    "\035\uffc7\036\uffc7\053\uffc7\054\uffc7\001\002\000\046\005" +
    "\uffca\007\uffca\011\uffca\012\uffca\013\uffca\014\uffca\024\102" +
    "\025\103\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034" +
    "\uffca\035\uffca\036\uffca\053\uffca\054\uffca\001\002\000\046" +
    "\005\uffc8\007\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\024" +
    "\102\025\103\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8" +
    "\034\uffc8\035\uffc8\036\uffc8\053\uffc8\054\uffc8\001\002\000" +
    "\046\005\uffc6\007\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6" +
    "\024\102\025\103\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033" +
    "\uffc6\034\uffc6\035\uffc6\036\uffc6\053\uffc6\054\uffc6\001\002" +
    "\000\046\004\007\006\017\010\053\016\037\017\024\026" +
    "\034\037\027\041\032\044\060\045\033\050\054\051\012" +
    "\056\072\057\022\060\016\061\061\062\025\063\044\001" +
    "\002\000\004\007\127\001\002\000\004\013\uffd3\001\002" +
    "\000\004\044\060\001\002\000\104\002\uffed\004\uffed\005" +
    "\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed" +
    "\014\uffed\015\uffed\016\uffed\017\uffed\026\uffed\037\uffed\041" +
    "\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047\uffed" +
    "\050\uffed\051\uffed\052\uffed\054\uffed\055\uffed\056\uffed\057" +
    "\uffed\060\uffed\061\uffed\062\uffed\063\uffed\001\002\000\064" +
    "\004\007\006\017\010\053\015\uffa5\016\037\017\024\026" +
    "\034\037\027\041\032\042\062\043\057\044\060\045\033" +
    "\046\065\047\023\050\054\051\012\052\040\055\015\056" +
    "\042\057\022\060\016\061\061\062\025\063\044\001\002" +
    "\000\006\007\uffa5\056\134\001\002\000\006\007\uffa5\012" +
    "\140\001\002\000\004\007\136\001\002\000\064\004\007" +
    "\006\017\010\053\015\uffa5\016\037\017\024\026\034\037" +
    "\027\041\032\042\062\043\057\044\060\045\033\046\065" +
    "\047\023\050\054\051\012\052\040\055\015\056\042\057" +
    "\022\060\016\061\061\062\025\063\044\001\002\000\104" +
    "\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011" +
    "\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec" +
    "\026\uffec\037\uffec\041\uffec\042\uffec\043\uffec\044\uffec\045" +
    "\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec\054\uffec" +
    "\055\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062\uffec\063" +
    "\uffec\001\002\000\004\056\143\001\002\000\006\007\uffea" +
    "\015\uffea\001\002\000\006\007\uffe7\015\uffe7\001\002\000" +
    "\010\007\uffa5\012\140\015\uffa5\001\002\000\006\007\uffe8" +
    "\015\uffe8\001\002\000\104\002\uffeb\004\uffeb\005\uffeb\006" +
    "\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\016\uffeb\017\uffeb\026\uffeb\037\uffeb\041\uffeb\042" +
    "\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb" +
    "\051\uffeb\052\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\060" +
    "\uffeb\061\uffeb\062\uffeb\063\uffeb\001\002\000\006\007\uffa5" +
    "\056\147\001\002\000\004\015\162\001\002\000\004\007" +
    "\uffdb\001\002\000\006\007\uffa5\012\155\001\002\000\004" +
    "\007\153\001\002\000\046\004\007\006\017\010\053\016" +
    "\037\017\024\026\034\037\027\041\032\044\060\045\033" +
    "\050\054\051\012\056\072\057\022\060\016\061\061\062" +
    "\025\063\044\001\002\000\004\013\uffde\001\002\000\004" +
    "\056\147\001\002\000\004\007\uffd9\001\002\000\004\007" +
    "\uffdc\001\002\000\006\007\uffa5\012\155\001\002\000\004" +
    "\007\uffda\001\002\000\042\004\007\006\017\016\037\017" +
    "\024\026\034\037\027\041\032\045\033\050\054\051\012" +
    "\056\072\057\022\060\016\061\061\062\025\063\044\001" +
    "\002\000\010\007\uffdd\012\uffdd\036\164\001\002\000\042" +
    "\004\007\006\017\016\037\017\024\026\034\037\027\041" +
    "\032\045\033\050\054\051\012\056\072\057\022\060\016" +
    "\061\061\062\025\063\044\001\002\000\026\005\uffcf\007" +
    "\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\035\070\036\uffcf" +
    "\053\uffcf\054\uffcf\001\002\000\104\002\ufffb\004\ufffb\005" +
    "\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb" +
    "\014\ufffb\015\ufffb\016\ufffb\017\ufffb\026\ufffb\037\ufffb\041" +
    "\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb" +
    "\050\ufffb\051\ufffb\052\ufffb\054\ufffb\055\ufffb\056\ufffb\057" +
    "\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\001\002\000\004" +
    "\007\170\001\002\000\066\004\uffd1\005\uffd1\006\uffd1\007" +
    "\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\016\uffd1\017\uffd1" +
    "\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\027" +
    "\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1" +
    "\036\uffd1\053\uffd1\054\uffd1\001\002\000\066\004\007\006" +
    "\017\010\053\011\172\015\uffa5\016\037\017\024\026\034" +
    "\037\027\041\032\042\062\043\057\044\060\045\033\046" +
    "\065\047\023\050\054\051\012\052\040\055\015\056\042" +
    "\057\022\060\016\061\061\062\025\063\044\001\002\000" +
    "\020\005\uffe3\007\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\054\uffe3\001\002\000\070\002\uffff\004\uffff\006\uffff\010" +
    "\uffff\011\uffff\015\uffff\016\uffff\017\uffff\026\uffff\037\uffff" +
    "\041\uffff\042\uffff\043\uffff\044\uffff\045\uffff\046\uffff\047" +
    "\uffff\050\uffff\051\uffff\052\uffff\055\uffff\056\uffff\057\uffff" +
    "\060\uffff\061\uffff\062\uffff\063\uffff\001\002\000\104\002" +
    "\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa" +
    "\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\026" +
    "\ufffa\037\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa" +
    "\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\054\ufffa\055" +
    "\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa\063\ufffa" +
    "\001\002\000\104\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7" +
    "\016\ufff7\017\ufff7\026\ufff7\037\ufff7\041\ufff7\042\ufff7\043" +
    "\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7" +
    "\052\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7\061" +
    "\ufff7\062\ufff7\063\ufff7\001\002\000\006\036\164\053\177" +
    "\001\002\000\046\004\007\006\017\010\053\016\037\017" +
    "\024\026\034\037\027\041\032\044\060\045\033\050\054" +
    "\051\012\056\072\057\022\060\016\061\061\062\025\063" +
    "\044\001\002\000\006\013\ufff6\054\201\001\002\000\046" +
    "\004\007\006\017\010\053\016\037\017\024\026\034\037" +
    "\027\041\032\044\060\045\033\050\054\051\012\056\072" +
    "\057\022\060\016\061\061\062\025\063\044\001\002\000" +
    "\004\013\ufff5\001\002\000\062\005\uffb8\007\uffb8\011\uffb8" +
    "\012\uffb8\013\uffb8\014\uffb8\016\uffb8\017\uffb8\020\uffb8\021" +
    "\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\027\uffb8\030\uffb8" +
    "\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\053" +
    "\uffb8\054\uffb8\001\002\000\042\004\007\006\017\016\037" +
    "\017\024\026\034\037\027\041\032\045\033\050\054\051" +
    "\012\056\072\057\022\060\016\061\061\062\025\063\044" +
    "\001\002\000\060\005\uffba\007\uffba\011\uffba\012\uffba\013" +
    "\uffba\014\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba" +
    "\024\uffba\025\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033" +
    "\uffba\034\uffba\035\uffba\036\uffba\053\uffba\054\uffba\001\002" +
    "\000\050\004\007\006\017\007\uffa5\010\053\016\037\017" +
    "\024\026\034\037\027\041\032\044\060\045\033\050\054" +
    "\051\012\056\072\057\022\060\016\061\061\062\025\063" +
    "\044\001\002\000\042\004\007\006\017\016\037\017\024" +
    "\026\034\037\027\041\032\045\033\050\054\051\012\056" +
    "\072\057\022\060\016\061\061\062\025\063\044\001\002" +
    "\000\006\005\211\036\164\001\002\000\066\004\uffd6\005" +
    "\uffd6\006\uffd6\007\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6" +
    "\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024" +
    "\uffd6\025\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6" +
    "\034\uffd6\035\uffd6\036\uffd6\053\uffd6\054\uffd6\001\002\000" +
    "\012\005\uffe1\007\uffe1\013\uffe1\014\uffe1\001\002\000\014" +
    "\005\uffa5\007\uffa5\012\216\013\uffa5\014\uffa5\001\002\000" +
    "\004\007\215\001\002\000\066\004\uffd5\005\uffd5\006\uffd5" +
    "\007\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\016\uffd5\017" +
    "\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5" +
    "\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035" +
    "\uffd5\036\uffd5\053\uffd5\054\uffd5\001\002\000\046\004\007" +
    "\006\017\010\053\016\037\017\024\026\034\037\027\041" +
    "\032\044\060\045\033\050\054\051\012\056\072\057\022" +
    "\060\016\061\061\062\025\063\044\001\002\000\012\005" +
    "\uffe2\007\uffe2\013\uffe2\014\uffe2\001\002\000\012\005\uffdf" +
    "\007\uffdf\013\uffdf\014\uffdf\001\002\000\014\005\uffa5\007" +
    "\uffa5\012\216\013\uffa5\014\uffa5\001\002\000\012\005\uffe0" +
    "\007\uffe0\013\uffe0\014\uffe0\001\002\000\062\005\uffb6\007" +
    "\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\016\uffb6\017\uffb6" +
    "\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\027" +
    "\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6" +
    "\036\uffb6\053\uffb6\054\uffb6\001\002\000\032\004\007\006" +
    "\017\041\032\045\033\050\054\051\012\056\072\057\022" +
    "\060\016\061\061\062\025\063\044\001\002\000\010\004" +
    "\207\006\206\012\226\001\002\000\050\004\007\006\017" +
    "\007\uffa5\010\053\016\037\017\024\026\034\037\027\041" +
    "\032\044\060\045\033\050\054\051\012\056\072\057\022" +
    "\060\016\061\061\062\025\063\044\001\002\000\004\007" +
    "\230\001\002\000\066\004\uffd4\005\uffd4\006\uffd4\007\uffd4" +
    "\011\uffd4\012\uffd4\013\uffd4\014\uffd4\016\uffd4\017\uffd4\020" +
    "\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\027\uffd4" +
    "\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036" +
    "\uffd4\053\uffd4\054\uffd4\001\002\000\104\002\ufffd\004\ufffd" +
    "\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013" +
    "\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\026\ufffd\037\ufffd" +
    "\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047" +
    "\ufffd\050\ufffd\051\ufffd\052\ufffd\054\ufffd\055\ufffd\056\ufffd" +
    "\057\ufffd\060\ufffd\061\ufffd\062\ufffd\063\ufffd\001\002\000" +
    "\062\005\uffb5\007\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5" +
    "\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024" +
    "\uffb5\025\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5" +
    "\034\uffb5\035\uffb5\036\uffb5\053\uffb5\054\uffb5\001\002\000" +
    "\062\005\uffb7\007\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7" +
    "\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024" +
    "\uffb7\025\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7" +
    "\034\uffb7\035\uffb7\036\uffb7\053\uffb7\054\uffb7\001\002\000" +
    "\046\004\007\006\017\010\053\016\037\017\024\026\034" +
    "\037\027\041\032\044\060\045\033\050\054\051\012\056" +
    "\072\057\022\060\016\061\061\062\025\063\044\001\002" +
    "\000\004\007\236\001\002\000\004\013\uffd2\001\002\000" +
    "\004\007\240\001\002\000\066\004\uffac\005\uffac\006\uffac" +
    "\007\uffac\011\uffac\012\uffac\013\uffac\014\uffac\016\uffac\017" +
    "\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac" +
    "\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035" +
    "\uffac\036\uffac\053\uffac\054\uffac\001\002\000\044\004\007" +
    "\006\017\011\uffa5\016\037\017\024\026\034\037\027\041" +
    "\032\045\033\050\054\051\012\056\072\057\022\060\016" +
    "\061\061\062\025\063\044\001\002\000\006\014\254\036" +
    "\164\001\002\000\004\011\253\001\002\000\004\011\ufff1" +
    "\001\002\000\006\011\uffa5\013\246\001\002\000\042\004" +
    "\007\006\017\016\037\017\024\026\034\037\027\041\032" +
    "\045\033\050\054\051\012\056\072\057\022\060\016\061" +
    "\061\062\025\063\044\001\002\000\004\011\ufff2\001\002" +
    "\000\004\011\uffef\001\002\000\006\011\uffa5\013\246\001" +
    "\002\000\004\011\ufff0\001\002\000\104\002\ufff4\004\ufff4" +
    "\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013" +
    "\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\026\ufff4\037\ufff4" +
    "\041\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\047" +
    "\ufff4\050\ufff4\051\ufff4\052\ufff4\054\ufff4\055\ufff4\056\ufff4" +
    "\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\001\002\000" +
    "\046\004\007\006\017\010\053\016\037\017\024\026\034" +
    "\037\027\041\032\044\060\045\033\050\054\051\012\056" +
    "\072\057\022\060\016\061\061\062\025\063\044\001\002" +
    "\000\006\011\ufff3\013\ufff3\001\002\000\050\004\007\006" +
    "\017\010\053\013\uffa5\016\037\017\024\026\034\037\027" +
    "\041\032\044\060\045\033\050\054\051\012\056\072\057" +
    "\022\060\016\061\061\062\025\063\044\001\002\000\004" +
    "\013\uffee\001\002\000\004\007\261\001\002\000\066\004" +
    "\uffd0\005\uffd0\006\uffd0\007\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\014\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023" +
    "\uffd0\024\uffd0\025\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0" +
    "\033\uffd0\034\uffd0\035\uffd0\036\uffd0\053\uffd0\054\uffd0\001" +
    "\002\000\104\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9" +
    "\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016" +
    "\ufff9\017\ufff9\026\ufff9\037\ufff9\041\ufff9\042\ufff9\043\ufff9" +
    "\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\052" +
    "\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9" +
    "\062\ufff9\063\ufff9\001\002\000\050\004\007\006\017\010" +
    "\053\014\uffa5\016\037\017\024\026\034\037\027\041\032" +
    "\044\060\045\033\050\054\051\012\056\072\057\022\060" +
    "\016\061\061\062\025\063\044\001\002\000\004\005\265" +
    "\001\002\000\066\004\uffd8\005\uffd8\006\uffd8\007\uffd8\011" +
    "\uffd8\012\uffd8\013\uffd8\014\uffd8\016\uffd8\017\uffd8\020\uffd8" +
    "\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\027\uffd8\030" +
    "\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8" +
    "\053\uffd8\054\uffd8\001\002\000\004\014\267\001\002\000" +
    "\004\005\270\001\002\000\066\004\uffd7\005\uffd7\006\uffd7" +
    "\007\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\016\uffd7\017" +
    "\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7" +
    "\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035" +
    "\uffd7\036\uffd7\053\uffd7\054\uffd7\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\072\002\025\003\047\004\045\005\004\006" +
    "\007\007\066\010\030\011\027\012\042\014\013\023\044" +
    "\024\010\025\046\031\005\032\055\033\063\034\054\035" +
    "\040\036\065\037\020\040\012\041\051\042\050\043\062" +
    "\044\035\045\034\046\017\047\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\002\025" +
    "\003\047\004\045\012\212\016\263\031\005\032\055\033" +
    "\063\035\040\036\065\037\020\040\012\041\051\042\050" +
    "\043\062\044\035\045\034\046\017\047\211\001\001\000" +
    "\066\002\025\003\047\004\045\007\172\010\030\011\027" +
    "\012\042\014\013\023\044\024\010\025\046\031\005\032" +
    "\055\033\063\034\054\035\040\036\065\037\020\040\012" +
    "\041\051\042\050\043\062\044\035\045\034\046\017\047" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\002\025\003\047\004\045\012\236\031\005" +
    "\032\055\033\063\035\040\036\065\037\020\040\012\041" +
    "\051\042\050\043\062\044\035\045\034\046\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\002\025\003\047\004\045\032\055" +
    "\033\063\044\232\045\034\046\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\002\025\003\047\004\045" +
    "\032\055\033\063\044\231\045\034\046\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\002\025\003\047\004\045\032\055\033" +
    "\063\044\222\045\034\046\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\002\025\003\047\004\045\032" +
    "\055\033\063\044\202\045\034\046\017\001\001\000\040" +
    "\002\025\003\047\004\045\032\055\033\063\035\175\036" +
    "\065\037\020\040\012\041\051\042\050\043\062\044\035" +
    "\045\034\046\017\001\001\000\002\001\001\000\006\015" +
    "\140\047\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\070" +
    "\002\025\003\047\004\045\006\170\007\066\010\030\011" +
    "\027\012\042\014\013\023\044\024\010\025\046\031\005" +
    "\032\055\033\063\034\054\035\040\036\065\037\020\040" +
    "\012\041\051\042\050\043\062\044\035\045\034\046\017" +
    "\047\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\002\025\003\047\004\045\032\055\033\063\037" +
    "\070\040\012\041\051\042\050\043\062\044\035\045\034" +
    "\046\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\002\025\003\047\004\045\032\055\033\063\040\123" +
    "\041\051\042\050\043\062\044\035\045\034\046\017\001" +
    "\001\000\032\002\025\003\047\004\045\032\055\033\063" +
    "\040\122\041\051\042\050\043\062\044\035\045\034\046" +
    "\017\001\001\000\032\002\025\003\047\004\045\032\055" +
    "\033\063\040\121\041\051\042\050\043\062\044\035\045" +
    "\034\046\017\001\001\000\032\002\025\003\047\004\045" +
    "\032\055\033\063\040\120\041\051\042\050\043\062\044" +
    "\035\045\034\046\017\001\001\000\032\002\025\003\047" +
    "\004\045\032\055\033\063\040\117\041\051\042\050\043" +
    "\062\044\035\045\034\046\017\001\001\000\032\002\025" +
    "\003\047\004\045\032\055\033\063\040\100\041\051\042" +
    "\050\043\062\044\035\045\034\046\017\001\001\000\002" +
    "\001\001\000\030\002\025\003\047\004\045\032\055\033" +
    "\063\041\116\042\050\043\062\044\035\045\034\046\017" +
    "\001\001\000\030\002\025\003\047\004\045\032\055\033" +
    "\063\041\103\042\050\043\062\044\035\045\034\046\017" +
    "\001\001\000\002\001\001\000\026\002\025\003\047\004" +
    "\045\032\055\033\063\042\115\043\062\044\035\045\034" +
    "\046\017\001\001\000\026\002\025\003\047\004\045\032" +
    "\055\033\063\042\106\043\062\044\035\045\034\046\017" +
    "\001\001\000\002\001\001\000\024\002\025\003\047\004" +
    "\045\032\055\033\063\043\114\044\035\045\034\046\017" +
    "\001\001\000\024\002\025\003\047\004\045\032\055\033" +
    "\063\043\113\044\035\045\034\046\017\001\001\000\024" +
    "\002\025\003\047\004\045\032\055\033\063\043\112\044" +
    "\035\045\034\046\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\002\025\003" +
    "\047\004\045\012\125\031\005\032\055\033\063\035\040" +
    "\036\065\037\020\040\012\041\051\042\050\043\062\044" +
    "\035\045\034\046\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\130\001\001\000\002\001\001\000" +
    "\066\002\025\003\047\004\045\007\144\010\030\011\027" +
    "\012\042\014\013\023\044\024\010\025\046\031\005\032" +
    "\055\033\063\034\054\035\040\036\065\037\020\040\012" +
    "\041\051\042\050\043\062\044\035\045\034\046\017\047" +
    "\003\001\001\000\006\014\134\047\003\001\001\000\006" +
    "\015\140\047\141\001\001\000\002\001\001\000\066\002" +
    "\025\003\047\004\045\007\136\010\030\011\027\012\042" +
    "\014\013\023\044\024\010\025\046\031\005\032\055\033" +
    "\063\034\054\035\040\036\065\037\020\040\012\041\051" +
    "\042\050\043\062\044\035\045\034\046\017\047\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\143\047\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\150\021\151" +
    "\047\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\156\047\155\001\001\000\002\001\001\000\044" +
    "\002\025\003\047\004\045\012\153\031\005\032\055\033" +
    "\063\035\040\036\065\037\020\040\012\041\051\042\050" +
    "\043\062\044\035\045\034\046\017\001\001\000\002\001" +
    "\001\000\004\020\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\160\047\155\001\001\000\002\001" +
    "\001\000\040\002\025\003\047\004\045\032\055\033\063" +
    "\035\162\036\065\037\020\040\012\041\051\042\050\043" +
    "\062\044\035\045\034\046\017\001\001\000\002\001\001" +
    "\000\036\002\025\003\047\004\045\032\055\033\063\036" +
    "\164\037\020\040\012\041\051\042\050\043\062\044\035" +
    "\045\034\046\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\066\002\025" +
    "\003\047\004\045\007\172\010\030\011\027\012\042\014" +
    "\013\023\044\024\010\025\046\031\005\032\055\033\063" +
    "\034\054\035\040\036\065\037\020\040\012\041\051\042" +
    "\050\043\062\044\035\045\034\046\017\047\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\002\025\003\047" +
    "\004\045\012\177\031\005\032\055\033\063\035\040\036" +
    "\065\037\020\040\012\041\051\042\050\043\062\044\035" +
    "\045\034\046\017\001\001\000\002\001\001\000\044\002" +
    "\025\003\047\004\045\012\201\031\005\032\055\033\063" +
    "\035\040\036\065\037\020\040\012\041\051\042\050\043" +
    "\062\044\035\045\034\046\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\002\025\003\047\004\045\032" +
    "\055\033\063\043\204\044\035\045\034\046\017\001\001" +
    "\000\002\001\001\000\050\002\025\003\047\004\045\012" +
    "\212\016\213\031\005\032\055\033\063\035\040\036\065" +
    "\037\020\040\012\041\051\042\050\043\062\044\035\045" +
    "\034\046\017\047\211\001\001\000\040\002\025\003\047" +
    "\004\045\032\055\033\063\035\207\036\065\037\020\040" +
    "\012\041\051\042\050\043\062\044\035\045\034\046\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\216\047\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\002\025\003\047\004\045\012" +
    "\220\031\005\032\055\033\063\035\040\036\065\037\020" +
    "\040\012\041\051\042\050\043\062\044\035\045\034\046" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\221\047\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\002\025\003\047\004\045\032\055\033\063" +
    "\045\224\046\017\001\001\000\002\001\001\000\050\002" +
    "\025\003\047\004\045\012\212\016\226\031\005\032\055" +
    "\033\063\035\040\036\065\037\020\040\012\041\051\042" +
    "\050\043\062\044\035\045\034\046\017\047\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\002\025\003\047" +
    "\004\045\012\234\031\005\032\055\033\063\035\040\036" +
    "\065\037\020\040\012\041\051\042\050\043\062\044\035" +
    "\045\034\046\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\002\025" +
    "\003\047\004\045\026\244\027\242\032\055\033\063\035" +
    "\241\036\065\037\020\040\012\041\051\042\050\043\062" +
    "\044\035\045\034\046\017\047\243\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\030\246" +
    "\047\247\001\001\000\042\002\025\003\047\004\045\026" +
    "\250\032\055\033\063\035\241\036\065\037\020\040\012" +
    "\041\051\042\050\043\062\044\035\045\034\046\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\030\251" +
    "\047\247\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\002\025\003\047\004\045\012\254\031\005\032\055" +
    "\033\063\035\040\036\065\037\020\040\012\041\051\042" +
    "\050\043\062\044\035\045\034\046\017\001\001\000\002" +
    "\001\001\000\050\002\025\003\047\004\045\012\212\016" +
    "\256\031\005\032\055\033\063\035\040\036\065\037\020" +
    "\040\012\041\051\042\050\043\062\044\035\045\034\046" +
    "\017\047\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\002\025\003" +
    "\047\004\045\012\212\016\265\031\005\032\055\033\063" +
    "\035\040\036\065\037\020\040\012\041\051\042\050\043" +
    "\062\044\035\045\034\046\017\047\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SMPLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SMPLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SMPLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    String msg = "Line " + lexer.getLine() + ", pos " +
				       lexer.getColumn() +
				       ": Unrecognised token <" +
                       lexer.getText() + ">";
		    throw new SMPLSyntaxException(msg, ioe);
		}
	  
    }


		SMPLLexer lexer;

		public SMPLParser(SMPLLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.println("Line " + lexer.getLine());

            int column = lexer.getColumn();

            for (int i = 0; i < column; i++) {
                System.err.print(lexer.yycharat(i));
            }
            System.err.println();

            // print an indicator on screen that will show the user
            // where the error is
            String indicator = String.format("%" + lexer.getColumn() + "s","^");
            System.err.println(indicator);

		    report_error("Syntax error", cur_token);
		}
	    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SMPLParser$actions {
  private final SMPLParser parser;

  /** Constructor */
  CUP$SMPLParser$actions(SMPLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action_part00000000(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SMPLParser$result;

      /* select the action based on the action number */
      switch (CUP$SMPLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              SMPLProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLProgram(s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("program",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLProgram start_val = (SMPLProgram)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		RESULT = start_val;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SMPLParser$parser.done_parsing();
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                lst.add(s); 
                RESULT = lst;
		     
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		        RESULT = new StmtSequence(s);
		     
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= assignStmt SEMI 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtAssignment a = (StmtAssignment)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = a; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= defStmt 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = d; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= outStmt SEMI 
            {
              Statement RESULT =null;
		int ioleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int ioright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Statement io = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = io; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= letStmt SEMI 
            {
              Statement RESULT =null;
		int letleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int letright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtLet let = (StmtLet)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = let; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= ifStmt SEMI 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtIfElse i = (StmtIfElse)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = i; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= caseStmt 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtCase c = (StmtCase)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= expression SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new Statement(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ifStmt ::= IF logicExp THEN expression 
            {
              StmtIfElse RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp pred = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp then = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new StmtIfElse(pred, then); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("ifStmt",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ifStmt ::= IF logicExp THEN expression ELSE expression 
            {
              StmtIfElse RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		Exp pred = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp then = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int altleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int altright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp alt = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new StmtIfElse(pred, then, alt); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("ifStmt",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // caseStmt ::= CASE LBRACE clauses RBRACE 
            {
              StmtCase RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<CaseClause> c = (ArrayList<CaseClause>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                RESULT = new StmtCase(c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("caseStmt",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // clause ::= logicExp COLON expression 
            {
              CaseClause RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp pred = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int actionleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int actionright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp action = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new CaseClause(pred, action); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("clause",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // clauses ::= clause clauseLst 
            {
              ArrayList<CaseClause> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		CaseClause c = (CaseClause)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int clstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int clstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<CaseClause> clst = (ArrayList<CaseClause>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                clst.add(0, c);
                RESULT = clst;
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("clauses",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // clauses ::= empty 
            {
              ArrayList<CaseClause> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("clauses",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // clauseLst ::= SEMI clause clauseLst 
            {
              ArrayList<CaseClause> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		CaseClause c = (CaseClause)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int clstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int clstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<CaseClause> clst = (ArrayList<CaseClause>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                clst.add(0, c);
                RESULT = clst;
              
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("clauseLst",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // clauseLst ::= empty 
            {
              ArrayList<CaseClause> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("clauseLst",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // assignStmt ::= IDs ASSIGN expressions 
            {
              StmtAssignment RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> id = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ExpSequence e = (ExpSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new StmtAssignment(id, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignStmt",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // defStmt ::= DEF ID procExp 
            {
              StmtDefinition RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new StmtDefinition(id, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("defStmt",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // procExp ::= PROC LPAREN IDs RPAREN stmt 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> p = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpProcedure(p, body); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procExp",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // procExp ::= PROC ID stmt 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpProcedure(id, body); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procExp",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IDs ::= ID IDList 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int idlleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<String> idl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            idl.add(0, id);
            RESULT = idl;
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("IDs",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IDs ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("IDs",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IDList ::= COMMA ID IDList 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int idlleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<String> idl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                idl.add(0, id);
                RESULT = idl;
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("IDList",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IDList ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("IDList",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // multiExp ::= LPAREN expressions RPAREN 
            {
              Exp RESULT =null;
		int expsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ExpSequence exps = (ExpSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new MultiExp(exps); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("multiExp",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= logicExp 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= procExp 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= LBRACE stmtList RBRACE 
            {
              Exp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = body; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expressions ::= expression expressionList 
            {
              ExpSequence RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ExpSequence el = (ExpSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                    el.add(e);
                    RESULT = el;
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expressions ::= empty 
            {
              ExpSequence RESULT =null;
		 RESULT = new ExpSequence(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expressionList ::= COMMA expression expressionList 
            {
              ExpSequence RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ExpSequence el = (ExpSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                        el.add(e);
                        RESULT = el;
                    
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressionList",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expressionList ::= empty 
            {
              ExpSequence RESULT =null;
		 RESULT = new ExpSequence(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressionList",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // letStmt ::= LET LPAREN bindings RPAREN expression 
            {
              StmtLet RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<Binding> bs = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		        RESULT = new StmtLet(bs, body); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("letStmt",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // binding ::= ID ASSIGN logicExp 
            {
              Binding RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new Binding(v, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("binding",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bindings ::= binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                bl.add(0,b);
                RESULT = bl;
             
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindings",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // bindings ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindings",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bindingsAux ::= COMMA binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                    bl.add(0,b);
                    RESULT = bl;
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bindingsAux ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // listExp ::= LBRACKET expressions RBRACKET 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ExpSequence e = (ExpSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                RESULT = new ExpList(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("listExp",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // vecExp ::= LBRACKET COLON expressions COLON RBRACKET 
            {
              ExpVector RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ExpSequence e = (ExpSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		
                RESULT = new ExpVector(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("vecExp",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // indexVecExp ::= primary LBRACKET logicExp RBRACKET 
            {
              ExpIndexVector RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                    RESULT = new ExpIndexVector(p, n); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("indexVecExp",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // callExp ::= primary LPAREN expressions RPAREN 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ExpSequence e = (ExpSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                RESULT = new ExpCall(p, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("callExp",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // callExp ::= CALL LPAREN primary COMMA expressions RPAREN 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ExpSequence e = (ExpSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                RESULT =  new ExpCall(p, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("callExp",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // outStmt ::= PRINT LPAREN expression RPAREN 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                RESULT = new StmtPrint(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("outStmt",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // outStmt ::= PRINTLN LPAREN expression RPAREN 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                RESULT = new StmtPrintLn(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("outStmt",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // inStmt ::= READ LPAREN RPAREN 
            {
              Statement RESULT =null;
		
                RESULT = new StmtRead(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("inStmt",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // inStmt ::= READINT LPAREN RPAREN 
            {
              Statement RESULT =null;
		
                RESULT = new StmtReadInt(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("inStmt",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // logicExp ::= logicExp OR orComp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp o = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpOr(e, o); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logicExp",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // logicExp ::= orComp 
            {
              Exp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp o = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = o; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logicExp",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // orComp ::= orComp AND relExp 
            {
              Exp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp o = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpAnd(o, r); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("orComp",28, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // orComp ::= relExp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = r; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("orComp",28, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // relExp ::= relExp NEQ bitExp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpNEQ(r, b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relExp",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // relExp ::= relExp GTEQ bitExp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpGTEQ(r, b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relExp",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // relExp ::= relExp LTEQ bitExp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpLTEQ(r, b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relExp",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // relExp ::= relExp LT bitExp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpLT(r, b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relExp",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // relExp ::= relExp GT bitExp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpGT(r, b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relExp",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // relExp ::= relExp EQ bitExp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpEQ(r, b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relExp",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // relExp ::= bitExp 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = b; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relExp",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // bitExp ::= bitExp BOR arithExp 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpBOR(b, a); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitExp",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // bitExp ::= bitExp BAND arithExp 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpBAND(b, a); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitExp",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bitExp ::= arithExp 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = a; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitExp",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // arithExp ::= arithExp PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpAdd(e, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // arithExp ::= arithExp MINUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpSub(e, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // arithExp ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // term ::= term MUL factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		    RESULT = new ExpMul(t, f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // term ::= term DIV factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		    RESULT = new ExpDiv(t, f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // term ::= term MOD factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		    RESULT = new ExpMod(t, f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // term ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // factor ::= unary POW factor 
            {
              Exp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp u = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            RESULT = new ExpPow(u, f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // factor ::= unary 
            {
              Exp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp u = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = u; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // unary ::= PLUS unary 
            {
              Exp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp u = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpUnary("+", u); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("unary",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // unary ::= MINUS unary 
            {
              Exp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp u = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpUnary("-", u); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("unary",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unary ::= BNOT unary 
            {
              Exp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp u = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpBNOT(u); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("unary",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // unary ::= NOT unary 
            {
              Exp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp u = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpNot(u); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("unary",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // unary ::= primary 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("unary",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // primary ::= literal 
            {
              Exp RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLValue< ? > lit = (SMPLValue< ? >)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLit(lit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("primary",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // primary ::= ID 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpId(id); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("primary",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // primary ::= callExp 
            {
              Exp RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp cl = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = cl; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("primary",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // primary ::= vecExp 
            {
              Exp RESULT =null;
		int vecleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vecright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ExpVector vec = (ExpVector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = vec; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("primary",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // primary ::= indexVecExp 
            {
              Exp RESULT =null;
		int ivecleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int ivecright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ExpIndexVector ivec = (ExpIndexVector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = ivec; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("primary",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // primary ::= listExp 
            {
              Exp RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ExpList lst = (ExpList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("primary",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // primary ::= inStmt 
            {
              Exp RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement in = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = in; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("primary",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // primary ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("primary",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // literal ::= INT 
            {
              SMPLValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = SMPLValue.make(ilit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literal",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // literal ::= DOUBLE 
            {
              SMPLValue< ? > RESULT =null;
		int dlitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int dlitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Double dlit = (Double)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = SMPLValue.make(dlit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literal",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // literal ::= STRING 
            {
              SMPLValue< ? > RESULT =null;
		int slitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String slit = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = SMPLValue.make(slit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literal",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // literal ::= CHARACTER 
            {
              SMPLValue< ? > RESULT =null;
		int chlitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int chlitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Character chlit = (Character)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = SMPLValue.make(chlit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literal",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // literal ::= BOOLEAN 
            {
              SMPLValue< ? > RESULT =null;
		int blitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int blitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Boolean blit = (Boolean)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = SMPLValue.make(blit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literal",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // literal ::= NIL 
            {
              SMPLValue< ? > RESULT =null;
		int nilleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int nilright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Object nil = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLPair(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literal",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // empty ::= 
            {
              Object RESULT =null;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("empty",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SMPLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
              return CUP$SMPLParser$do_action_part00000000(
                               CUP$SMPLParser$act_num,
                               CUP$SMPLParser$parser,
                               CUP$SMPLParser$stack,
                               CUP$SMPLParser$top);
    }
}

}
