
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package smpl.syntax.parser;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import smpl.exceptions.SMPLSyntaxException;
import smpl.syntax.Binding;
import smpl.syntax.CaseClause;
import smpl.syntax.lexer.SMPLLexer;
import smpl.syntax.ast.core.Exp;
import smpl.syntax.ast.core.SMPLProgram;
import smpl.syntax.ast.*;
import smpl.types.SMPLValue;
import smpl.types.compound.SMPLPair;
import smpl.types.compound.SMPLVector;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SMPLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SMPLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SMPLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\005\003\000\002\002\004\000\002\006" +
    "\004\000\002\006\003\000\002\007\003\000\002\007\003" +
    "\000\002\011\004\000\002\011\004\000\002\011\004\000" +
    "\002\011\004\000\002\011\003\000\002\011\003\000\002" +
    "\011\004\000\002\010\006\000\002\010\010\000\002\027" +
    "\006\000\002\030\005\000\002\031\004\000\002\031\003" +
    "\000\002\032\005\000\002\032\003\000\002\026\010\000" +
    "\002\012\005\000\002\013\005\000\002\033\007\000\002" +
    "\033\005\000\002\016\004\000\002\016\003\000\002\017" +
    "\005\000\002\017\003\000\002\015\005\000\002\014\003" +
    "\000\002\014\003\000\002\014\005\000\002\020\004\000" +
    "\002\020\003\000\002\021\005\000\002\021\003\000\002" +
    "\025\007\000\002\022\005\000\002\023\004\000\002\023" +
    "\003\000\002\024\005\000\002\024\003\000\002\002\005" +
    "\000\002\003\007\000\002\004\006\000\002\034\006\000" +
    "\002\034\010\000\002\036\006\000\002\036\006\000\002" +
    "\035\005\000\002\035\005\000\002\037\005\000\002\037" +
    "\003\000\002\040\005\000\002\040\003\000\002\041\005" +
    "\000\002\041\005\000\002\041\005\000\002\041\005\000" +
    "\002\041\005\000\002\041\005\000\002\041\003\000\002" +
    "\042\005\000\002\042\005\000\002\042\003\000\002\043" +
    "\005\000\002\043\005\000\002\043\003\000\002\044\005" +
    "\000\002\044\005\000\002\044\005\000\002\044\003\000" +
    "\002\045\005\000\002\045\003\000\002\046\004\000\002" +
    "\046\004\000\002\046\004\000\002\046\004\000\002\046" +
    "\003\000\002\047\003\000\002\047\003\000\002\047\003" +
    "\000\002\047\003\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\047\005\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\051\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\064\004\007\006\021\010\054\015\uffa2\016" +
    "\037\017\026\026\035\037\031\041\032\042\064\043\060" +
    "\044\062\045\033\046\067\047\025\050\055\051\012\052" +
    "\041\055\016\056\043\057\024\060\020\061\063\062\027" +
    "\063\045\001\002\000\006\007\uffe6\015\uffe6\001\002\000" +
    "\004\002\275\001\002\000\014\005\uffe1\007\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\001\002\000\052\004\007\005\uffa2\006" +
    "\021\010\054\014\267\016\037\017\026\026\035\037\031" +
    "\041\032\044\062\045\033\050\055\051\012\056\074\057" +
    "\024\060\020\061\063\062\027\063\045\001\002\000\066" +
    "\002\001\004\007\006\021\010\054\015\uffa2\016\037\017" +
    "\026\026\035\037\031\041\032\042\064\043\060\044\062" +
    "\045\033\046\067\047\025\050\055\051\012\052\041\055" +
    "\016\056\043\057\024\060\020\061\063\062\027\063\045" +
    "\001\002\000\074\002\ufff7\004\ufff7\006\ufff7\010\ufff7\011" +
    "\ufff7\012\ufff7\015\ufff7\016\ufff7\017\ufff7\026\ufff7\037\ufff7" +
    "\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047" +
    "\ufff7\050\ufff7\051\ufff7\052\ufff7\054\ufff7\055\ufff7\056\ufff7" +
    "\057\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7\001\002\000" +
    "\004\006\265\001\002\000\042\005\uffc2\007\uffc2\012\uffc2" +
    "\013\uffc2\014\uffc2\024\104\025\105\027\uffc2\030\uffc2\031" +
    "\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\053\uffc2" +
    "\001\002\000\004\015\263\001\002\000\004\013\262\001" +
    "\002\000\004\010\245\001\002\000\072\002\ufffd\004\ufffd" +
    "\006\ufffd\010\ufffd\011\ufffd\012\ufffd\015\ufffd\016\ufffd\017" +
    "\ufffd\026\ufffd\037\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd" +
    "\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\055" +
    "\ufffd\056\ufffd\057\ufffd\060\ufffd\061\ufffd\062\ufffd\063\ufffd" +
    "\001\002\000\062\004\uffa7\005\uffa7\006\uffa7\007\uffa7\012" +
    "\uffa7\013\uffa7\014\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7" +
    "\022\uffa7\023\uffa7\024\uffa7\025\uffa7\027\uffa7\030\uffa7\031" +
    "\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\053\uffa7" +
    "\001\002\000\046\004\007\006\021\010\054\016\037\017" +
    "\026\026\035\037\031\041\032\044\062\045\033\050\055" +
    "\051\012\056\074\057\024\060\020\061\063\062\027\063" +
    "\045\001\002\000\062\004\uffb0\005\uffb0\006\uffb0\007\uffb0" +
    "\012\uffb0\013\uffb0\014\uffb0\016\uffb0\017\uffb0\020\uffb0\021" +
    "\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\027\uffb0\030\uffb0" +
    "\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\053" +
    "\uffb0\001\002\000\036\005\uffc9\007\uffc9\012\uffc9\013\uffc9" +
    "\014\uffc9\027\075\030\100\031\076\032\102\033\077\034" +
    "\101\035\uffc9\036\uffc9\053\uffc9\001\002\000\062\004\uffa8" +
    "\005\uffa8\006\uffa8\007\uffa8\012\uffa8\013\uffa8\014\uffa8\016" +
    "\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8" +
    "\025\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034" +
    "\uffa8\035\uffa8\036\uffa8\053\uffa8\001\002\000\004\006\240" +
    "\001\002\000\042\004\007\006\021\016\037\017\026\026" +
    "\035\037\031\041\032\045\033\050\055\051\012\056\074" +
    "\057\024\060\020\061\063\062\027\063\045\001\002\000" +
    "\062\004\uffa5\005\uffa5\006\uffa5\007\uffa5\012\uffa5\013\uffa5" +
    "\014\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023" +
    "\uffa5\024\uffa5\025\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5" +
    "\033\uffa5\034\uffa5\035\uffa5\036\uffa5\053\uffa5\001\002\000" +
    "\062\004\uffab\005\uffab\006\uffab\007\uffab\012\uffab\013\uffab" +
    "\014\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023" +
    "\uffab\024\uffab\025\uffab\027\uffab\030\uffab\031\uffab\032\uffab" +
    "\033\uffab\034\uffab\035\uffab\036\uffab\053\uffab\001\002\000" +
    "\042\004\007\006\021\016\037\017\026\026\035\037\031" +
    "\041\032\045\033\050\055\051\012\056\074\057\024\060" +
    "\020\061\063\062\027\063\045\001\002\000\062\004\uffa3" +
    "\005\uffa3\006\uffa3\007\uffa3\012\uffa3\013\uffa3\014\uffa3\016" +
    "\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3" +
    "\025\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034" +
    "\uffa3\035\uffa3\036\uffa3\053\uffa3\001\002\000\004\006\231" +
    "\001\002\000\004\013\230\001\002\000\042\004\007\006" +
    "\021\016\037\017\026\026\035\037\031\041\032\045\033" +
    "\050\055\051\012\056\074\057\024\060\020\061\063\062" +
    "\027\063\045\001\002\000\062\004\213\005\uffb1\006\212" +
    "\007\uffb1\012\uffb1\013\uffb1\014\uffb1\016\uffb1\017\uffb1\020" +
    "\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\027\uffb1" +
    "\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036" +
    "\uffb1\053\uffb1\001\002\000\042\004\007\006\021\016\037" +
    "\017\026\026\035\037\031\041\032\045\033\050\055\051" +
    "\012\056\074\057\024\060\020\061\063\062\027\063\045" +
    "\001\002\000\056\005\uffb6\007\uffb6\012\uffb6\013\uffb6\014" +
    "\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\207" +
    "\024\uffb6\025\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033" +
    "\uffb6\034\uffb6\035\uffb6\036\uffb6\053\uffb6\001\002\000\042" +
    "\004\007\006\021\016\037\017\026\026\035\037\031\041" +
    "\032\045\033\050\055\051\012\056\074\057\024\060\020" +
    "\061\063\062\027\063\045\001\002\000\016\005\uffe2\007" +
    "\uffe2\012\uffe2\013\uffe2\014\uffe2\036\132\001\002\000\054" +
    "\004\uffaf\006\uffaf\012\144\013\uffaf\015\uffa2\016\uffaf\017" +
    "\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf" +
    "\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035" +
    "\uffaf\036\uffaf\001\002\000\004\013\177\001\002\000\062" +
    "\004\uffa4\005\uffa4\006\uffa4\007\uffa4\012\uffa4\013\uffa4\014" +
    "\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4" +
    "\024\uffa4\025\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033" +
    "\uffa4\034\uffa4\035\uffa4\036\uffa4\053\uffa4\001\002\000\004" +
    "\013\176\001\002\000\062\004\uffac\005\uffac\006\uffac\007" +
    "\uffac\012\uffac\013\uffac\014\uffac\016\uffac\017\uffac\020\uffac" +
    "\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\027\uffac\030" +
    "\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac" +
    "\053\uffac\001\002\000\062\004\uffad\005\uffad\006\uffad\007" +
    "\uffad\012\uffad\013\uffad\014\uffad\016\uffad\017\uffad\020\uffad" +
    "\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\027\uffad\030" +
    "\uffad\031\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad" +
    "\053\uffad\001\002\000\074\002\ufff6\004\ufff6\006\ufff6\010" +
    "\ufff6\011\ufff6\012\ufff6\015\ufff6\016\ufff6\017\ufff6\026\ufff6" +
    "\037\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\046" +
    "\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\054\ufff6\055\ufff6" +
    "\056\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6\063\ufff6\001" +
    "\002\000\054\005\uffbc\007\uffbc\012\uffbc\013\uffbc\014\uffbc" +
    "\016\uffbc\017\uffbc\020\113\021\114\022\112\024\uffbc\025" +
    "\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc" +
    "\035\uffbc\036\uffbc\053\uffbc\001\002\000\046\005\uffbf\007" +
    "\uffbf\012\uffbf\013\uffbf\014\uffbf\016\107\017\110\024\uffbf" +
    "\025\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034" +
    "\uffbf\035\uffbf\036\uffbf\053\uffbf\001\002\000\064\004\007" +
    "\006\021\010\054\015\uffa2\016\037\017\026\026\035\037" +
    "\031\041\032\042\064\043\060\044\062\045\033\046\067" +
    "\047\025\050\055\051\012\052\041\055\016\056\043\057" +
    "\024\060\020\061\063\062\027\063\045\001\002\000\004" +
    "\006\171\001\002\000\004\013\170\001\002\000\062\004" +
    "\uffae\005\uffae\006\uffae\007\uffae\012\uffae\013\uffae\014\uffae" +
    "\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024" +
    "\uffae\025\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae" +
    "\034\uffae\035\uffae\036\uffae\053\uffae\001\002\000\004\006" +
    "\152\001\002\000\072\002\ufffc\004\ufffc\006\ufffc\010\ufffc" +
    "\011\ufffc\012\ufffc\015\ufffc\016\ufffc\017\ufffc\026\ufffc\037" +
    "\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc" +
    "\047\ufffc\050\ufffc\051\ufffc\052\ufffc\055\ufffc\056\ufffc\057" +
    "\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc\001\002\000\006" +
    "\006\137\056\136\001\002\000\062\004\uffa6\005\uffa6\006" +
    "\uffa6\007\uffa6\012\uffa6\013\uffa6\014\uffa6\016\uffa6\017\uffa6" +
    "\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\027" +
    "\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6" +
    "\036\uffa6\053\uffa6\001\002\000\004\056\134\001\002\000" +
    "\054\005\uffb8\007\uffb8\012\uffb8\013\uffb8\014\uffb8\016\uffb8" +
    "\017\uffb8\020\uffb8\021\uffb8\022\uffb8\024\uffb8\025\uffb8\027" +
    "\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8" +
    "\036\uffb8\053\uffb8\001\002\000\062\004\uffaa\005\uffaa\006" +
    "\uffaa\007\uffaa\012\uffaa\013\uffaa\014\uffaa\016\uffaa\017\uffaa" +
    "\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\027" +
    "\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa" +
    "\036\uffaa\053\uffaa\001\002\000\004\006\127\001\002\000" +
    "\070\002\ufffe\004\ufffe\006\ufffe\010\ufffe\011\ufffe\015\ufffe" +
    "\016\ufffe\017\ufffe\026\ufffe\037\ufffe\041\ufffe\042\ufffe\043" +
    "\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe" +
    "\052\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe\062" +
    "\ufffe\063\ufffe\001\002\000\022\005\uffcb\007\uffcb\012\uffcb" +
    "\013\uffcb\014\uffcb\035\072\036\uffcb\053\uffcb\001\002\000" +
    "\042\004\007\006\021\016\037\017\026\026\035\037\031" +
    "\041\032\045\033\050\055\051\012\056\074\057\024\060" +
    "\020\061\063\062\027\063\045\001\002\000\036\005\uffca" +
    "\007\uffca\012\uffca\013\uffca\014\uffca\027\075\030\100\031" +
    "\076\032\102\033\077\034\101\035\uffca\036\uffca\053\uffca" +
    "\001\002\000\062\004\uffaf\005\uffaf\006\uffaf\007\uffaf\012" +
    "\uffaf\013\uffaf\014\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf" +
    "\022\uffaf\023\uffaf\024\uffaf\025\uffaf\027\uffaf\030\uffaf\031" +
    "\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\053\uffaf" +
    "\001\002\000\042\004\007\006\021\016\037\017\026\026" +
    "\035\037\031\041\032\045\033\050\055\051\012\056\074" +
    "\057\024\060\020\061\063\062\027\063\045\001\002\000" +
    "\042\004\007\006\021\016\037\017\026\026\035\037\031" +
    "\041\032\045\033\050\055\051\012\056\074\057\024\060" +
    "\020\061\063\062\027\063\045\001\002\000\042\004\007" +
    "\006\021\016\037\017\026\026\035\037\031\041\032\045" +
    "\033\050\055\051\012\056\074\057\024\060\020\061\063" +
    "\062\027\063\045\001\002\000\042\004\007\006\021\016" +
    "\037\017\026\026\035\037\031\041\032\045\033\050\055" +
    "\051\012\056\074\057\024\060\020\061\063\062\027\063" +
    "\045\001\002\000\042\004\007\006\021\016\037\017\026" +
    "\026\035\037\031\041\032\045\033\050\055\051\012\056" +
    "\074\057\024\060\020\061\063\062\027\063\045\001\002" +
    "\000\042\004\007\006\021\016\037\017\026\026\035\037" +
    "\031\041\032\045\033\050\055\051\012\056\074\057\024" +
    "\060\020\061\063\062\027\063\045\001\002\000\042\005" +
    "\uffc6\007\uffc6\012\uffc6\013\uffc6\014\uffc6\024\104\025\105" +
    "\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035" +
    "\uffc6\036\uffc6\053\uffc6\001\002\000\042\004\007\006\021" +
    "\016\037\017\026\026\035\037\031\041\032\045\033\050" +
    "\055\051\012\056\074\057\024\060\020\061\063\062\027" +
    "\063\045\001\002\000\042\004\007\006\021\016\037\017" +
    "\026\026\035\037\031\041\032\045\033\050\055\051\012" +
    "\056\074\057\024\060\020\061\063\062\027\063\045\001" +
    "\002\000\046\005\uffc1\007\uffc1\012\uffc1\013\uffc1\014\uffc1" +
    "\016\107\017\110\024\uffc1\025\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\053\uffc1" +
    "\001\002\000\042\004\007\006\021\016\037\017\026\026" +
    "\035\037\031\041\032\045\033\050\055\051\012\056\074" +
    "\057\024\060\020\061\063\062\027\063\045\001\002\000" +
    "\042\004\007\006\021\016\037\017\026\026\035\037\031" +
    "\041\032\045\033\050\055\051\012\056\074\057\024\060" +
    "\020\061\063\062\027\063\045\001\002\000\054\005\uffbd" +
    "\007\uffbd\012\uffbd\013\uffbd\014\uffbd\016\uffbd\017\uffbd\020" +
    "\113\021\114\022\112\024\uffbd\025\uffbd\027\uffbd\030\uffbd" +
    "\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\053" +
    "\uffbd\001\002\000\042\004\007\006\021\016\037\017\026" +
    "\026\035\037\031\041\032\045\033\050\055\051\012\056" +
    "\074\057\024\060\020\061\063\062\027\063\045\001\002" +
    "\000\042\004\007\006\021\016\037\017\026\026\035\037" +
    "\031\041\032\045\033\050\055\051\012\056\074\057\024" +
    "\060\020\061\063\062\027\063\045\001\002\000\042\004" +
    "\007\006\021\016\037\017\026\026\035\037\031\041\032" +
    "\045\033\050\055\051\012\056\074\057\024\060\020\061" +
    "\063\062\027\063\045\001\002\000\054\005\uffba\007\uffba" +
    "\012\uffba\013\uffba\014\uffba\016\uffba\017\uffba\020\uffba\021" +
    "\uffba\022\uffba\024\uffba\025\uffba\027\uffba\030\uffba\031\uffba" +
    "\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\053\uffba\001" +
    "\002\000\054\005\uffbb\007\uffbb\012\uffbb\013\uffbb\014\uffbb" +
    "\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\024\uffbb\025" +
    "\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb" +
    "\035\uffbb\036\uffbb\053\uffbb\001\002\000\054\005\uffb9\007" +
    "\uffb9\012\uffb9\013\uffb9\014\uffb9\016\uffb9\017\uffb9\020\uffb9" +
    "\021\uffb9\022\uffb9\024\uffb9\025\uffb9\027\uffb9\030\uffb9\031" +
    "\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\053\uffb9" +
    "\001\002\000\054\005\uffbe\007\uffbe\012\uffbe\013\uffbe\014" +
    "\uffbe\016\uffbe\017\uffbe\020\113\021\114\022\112\024\uffbe" +
    "\025\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034" +
    "\uffbe\035\uffbe\036\uffbe\053\uffbe\001\002\000\046\005\uffc0" +
    "\007\uffc0\012\uffc0\013\uffc0\014\uffc0\016\107\017\110\024" +
    "\uffc0\025\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0" +
    "\034\uffc0\035\uffc0\036\uffc0\053\uffc0\001\002\000\042\005" +
    "\uffc8\007\uffc8\012\uffc8\013\uffc8\014\uffc8\024\104\025\105" +
    "\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035" +
    "\uffc8\036\uffc8\053\uffc8\001\002\000\042\005\uffc4\007\uffc4" +
    "\012\uffc4\013\uffc4\014\uffc4\024\104\025\105\027\uffc4\030" +
    "\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4" +
    "\053\uffc4\001\002\000\042\005\uffc7\007\uffc7\012\uffc7\013" +
    "\uffc7\014\uffc7\024\104\025\105\027\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\053\uffc7\001" +
    "\002\000\042\005\uffc5\007\uffc5\012\uffc5\013\uffc5\014\uffc5" +
    "\024\104\025\105\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\053\uffc5\001\002\000\042" +
    "\005\uffc3\007\uffc3\012\uffc3\013\uffc3\014\uffc3\024\104\025" +
    "\105\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3" +
    "\035\uffc3\036\uffc3\053\uffc3\001\002\000\042\004\007\006" +
    "\021\016\037\017\026\026\035\037\031\041\032\045\033" +
    "\050\055\051\012\056\074\057\024\060\020\061\063\062" +
    "\027\063\045\001\002\000\006\007\131\036\132\001\002" +
    "\000\004\013\uffd0\001\002\000\042\004\007\006\021\016" +
    "\037\017\026\026\035\037\031\041\032\045\033\050\055" +
    "\051\012\056\074\057\024\060\020\061\063\062\027\063" +
    "\045\001\002\000\022\005\uffcc\007\uffcc\012\uffcc\013\uffcc" +
    "\014\uffcc\035\072\036\uffcc\053\uffcc\001\002\000\046\004" +
    "\007\006\021\010\054\016\037\017\026\026\035\037\031" +
    "\041\032\044\062\045\033\050\055\051\012\056\074\057" +
    "\024\060\020\061\063\062\027\063\045\001\002\000\004" +
    "\013\uffea\001\002\000\046\004\007\006\021\010\054\016" +
    "\037\017\026\026\035\037\031\041\032\044\062\045\033" +
    "\050\055\051\012\056\074\057\024\060\020\061\063\062" +
    "\027\063\045\001\002\000\006\007\uffa2\056\140\001\002" +
    "\000\006\007\uffa2\012\144\001\002\000\004\007\142\001" +
    "\002\000\046\004\007\006\021\010\054\016\037\017\026" +
    "\026\035\037\031\041\032\044\062\045\033\050\055\051" +
    "\012\056\074\057\024\060\020\061\063\062\027\063\045" +
    "\001\002\000\014\005\uffe9\007\uffe9\012\uffe9\013\uffe9\014" +
    "\uffe9\001\002\000\004\056\147\001\002\000\006\007\uffe7" +
    "\015\uffe7\001\002\000\006\007\uffe4\015\uffe4\001\002\000" +
    "\010\007\uffa2\012\144\015\uffa2\001\002\000\006\007\uffe5" +
    "\015\uffe5\001\002\000\014\005\uffe8\007\uffe8\012\uffe8\013" +
    "\uffe8\014\uffe8\001\002\000\006\007\uffa2\056\153\001\002" +
    "\000\004\015\166\001\002\000\004\007\uffd8\001\002\000" +
    "\006\007\uffa2\012\161\001\002\000\004\007\157\001\002" +
    "\000\046\004\007\006\021\010\054\016\037\017\026\026" +
    "\035\037\031\041\032\044\062\045\033\050\055\051\012" +
    "\056\074\057\024\060\020\061\063\062\027\063\045\001" +
    "\002\000\004\013\uffdb\001\002\000\004\056\153\001\002" +
    "\000\004\007\uffd6\001\002\000\004\007\uffd9\001\002\000" +
    "\006\007\uffa2\012\161\001\002\000\004\007\uffd7\001\002" +
    "\000\042\004\007\006\021\016\037\017\026\026\035\037" +
    "\031\041\032\045\033\050\055\051\012\056\074\057\024" +
    "\060\020\061\063\062\027\063\045\001\002\000\010\007" +
    "\uffda\012\uffda\036\132\001\002\000\074\002\ufff9\004\ufff9" +
    "\006\ufff9\010\ufff9\011\ufff9\012\ufff9\015\ufff9\016\ufff9\017" +
    "\ufff9\026\ufff9\037\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9" +
    "\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\054" +
    "\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9" +
    "\063\ufff9\001\002\000\004\007\172\001\002\000\062\004" +
    "\uffce\005\uffce\006\uffce\007\uffce\012\uffce\013\uffce\014\uffce" +
    "\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024" +
    "\uffce\025\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce" +
    "\034\uffce\035\uffce\036\uffce\053\uffce\001\002\000\066\004" +
    "\007\006\021\010\054\011\174\015\uffa2\016\037\017\026" +
    "\026\035\037\031\041\032\042\064\043\060\044\062\045" +
    "\033\046\067\047\025\050\055\051\012\052\041\055\016" +
    "\056\043\057\024\060\020\061\063\062\027\063\045\001" +
    "\002\000\014\005\uffe0\007\uffe0\012\uffe0\013\uffe0\014\uffe0" +
    "\001\002\000\070\002\uffff\004\uffff\006\uffff\010\uffff\011" +
    "\uffff\015\uffff\016\uffff\017\uffff\026\uffff\037\uffff\041\uffff" +
    "\042\uffff\043\uffff\044\uffff\045\uffff\046\uffff\047\uffff\050" +
    "\uffff\051\uffff\052\uffff\055\uffff\056\uffff\057\uffff\060\uffff" +
    "\061\uffff\062\uffff\063\uffff\001\002\000\074\002\ufff8\004" +
    "\ufff8\006\ufff8\010\ufff8\011\ufff8\012\ufff8\015\ufff8\016\ufff8" +
    "\017\ufff8\026\ufff8\037\ufff8\041\ufff8\042\ufff8\043\ufff8\044" +
    "\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8" +
    "\054\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\062" +
    "\ufff8\063\ufff8\001\002\000\074\002\ufff5\004\ufff5\006\ufff5" +
    "\010\ufff5\011\ufff5\012\ufff5\015\ufff5\016\ufff5\017\ufff5\026" +
    "\ufff5\037\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5" +
    "\046\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\054\ufff5\055" +
    "\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5" +
    "\001\002\000\006\036\132\053\201\001\002\000\064\004" +
    "\007\006\021\010\054\015\uffa2\016\037\017\026\026\035" +
    "\037\031\041\032\042\064\043\060\044\062\045\033\046" +
    "\067\047\025\050\055\051\012\052\041\055\016\056\043" +
    "\057\024\060\020\061\063\062\027\063\045\001\002\000" +
    "\074\002\ufffd\004\ufffd\006\ufffd\010\ufffd\011\ufffd\012\ufffd" +
    "\015\ufffd\016\ufffd\017\ufffd\026\ufffd\037\ufffd\041\ufffd\042" +
    "\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd" +
    "\051\ufffd\052\ufffd\054\204\055\ufffd\056\ufffd\057\ufffd\060" +
    "\ufffd\061\ufffd\062\ufffd\063\ufffd\001\002\000\072\002\ufff4" +
    "\004\ufff4\006\ufff4\010\ufff4\011\ufff4\012\ufff4\015\ufff4\016" +
    "\ufff4\017\ufff4\026\ufff4\037\ufff4\041\ufff4\042\ufff4\043\ufff4" +
    "\044\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052" +
    "\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4" +
    "\063\ufff4\001\002\000\064\004\007\006\021\010\054\015" +
    "\uffa2\016\037\017\026\026\035\037\031\041\032\042\064" +
    "\043\060\044\062\045\033\046\067\047\025\050\055\051" +
    "\012\052\041\055\016\056\043\057\024\060\020\061\063" +
    "\062\027\063\045\001\002\000\074\002\uffec\004\uffec\006" +
    "\uffec\010\uffec\011\uffec\012\uffec\015\uffec\016\uffec\017\uffec" +
    "\026\uffec\037\uffec\041\uffec\042\uffec\043\uffec\044\uffec\045" +
    "\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec\054\uffec" +
    "\055\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062\uffec\063" +
    "\uffec\001\002\000\072\002\ufff3\004\ufff3\006\ufff3\010\ufff3" +
    "\011\ufff3\012\ufff3\015\ufff3\016\ufff3\017\ufff3\026\ufff3\037" +
    "\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3" +
    "\047\ufff3\050\ufff3\051\ufff3\052\ufff3\055\ufff3\056\ufff3\057" +
    "\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3\001\002\000\042" +
    "\004\007\006\021\016\037\017\026\026\035\037\031\041" +
    "\032\045\033\050\055\051\012\056\074\057\024\060\020" +
    "\061\063\062\027\063\045\001\002\000\054\005\uffb7\007" +
    "\uffb7\012\uffb7\013\uffb7\014\uffb7\016\uffb7\017\uffb7\020\uffb7" +
    "\021\uffb7\022\uffb7\024\uffb7\025\uffb7\027\uffb7\030\uffb7\031" +
    "\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\053\uffb7" +
    "\001\002\000\056\005\uffb5\007\uffb5\012\uffb5\013\uffb5\014" +
    "\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5" +
    "\024\uffb5\025\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033" +
    "\uffb5\034\uffb5\035\uffb5\036\uffb5\053\uffb5\001\002\000\050" +
    "\004\007\006\021\007\uffa2\010\054\016\037\017\026\026" +
    "\035\037\031\041\032\044\062\045\033\050\055\051\012" +
    "\056\074\057\024\060\020\061\063\062\027\063\045\001" +
    "\002\000\042\004\007\006\021\016\037\017\026\026\035" +
    "\037\031\041\032\045\033\050\055\051\012\056\074\057" +
    "\024\060\020\061\063\062\027\063\045\001\002\000\006" +
    "\005\215\036\132\001\002\000\062\004\uffd3\005\uffd3\006" +
    "\uffd3\007\uffd3\012\uffd3\013\uffd3\014\uffd3\016\uffd3\017\uffd3" +
    "\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\027" +
    "\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3" +
    "\036\uffd3\053\uffd3\001\002\000\012\005\uffde\007\uffde\013" +
    "\uffde\014\uffde\001\002\000\014\005\uffa2\007\uffa2\012\222" +
    "\013\uffa2\014\uffa2\001\002\000\004\007\221\001\002\000" +
    "\062\004\uffd2\005\uffd2\006\uffd2\007\uffd2\012\uffd2\013\uffd2" +
    "\014\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023" +
    "\uffd2\024\uffd2\025\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2" +
    "\033\uffd2\034\uffd2\035\uffd2\036\uffd2\053\uffd2\001\002\000" +
    "\046\004\007\006\021\010\054\016\037\017\026\026\035" +
    "\037\031\041\032\044\062\045\033\050\055\051\012\056" +
    "\074\057\024\060\020\061\063\062\027\063\045\001\002" +
    "\000\012\005\uffdf\007\uffdf\013\uffdf\014\uffdf\001\002\000" +
    "\012\005\uffdc\007\uffdc\013\uffdc\014\uffdc\001\002\000\014" +
    "\005\uffa2\007\uffa2\012\222\013\uffa2\014\uffa2\001\002\000" +
    "\012\005\uffdd\007\uffdd\013\uffdd\014\uffdd\001\002\000\056" +
    "\005\uffb3\007\uffb3\012\uffb3\013\uffb3\014\uffb3\016\uffb3\017" +
    "\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3" +
    "\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035" +
    "\uffb3\036\uffb3\053\uffb3\001\002\000\074\002\ufffb\004\ufffb" +
    "\006\ufffb\010\ufffb\011\ufffb\012\ufffb\015\ufffb\016\ufffb\017" +
    "\ufffb\026\ufffb\037\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb" +
    "\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\054" +
    "\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb" +
    "\063\ufffb\001\002\000\032\004\007\006\021\041\032\045" +
    "\033\050\055\051\012\056\074\057\024\060\020\061\063" +
    "\062\027\063\045\001\002\000\010\004\213\006\212\012" +
    "\233\001\002\000\050\004\007\006\021\007\uffa2\010\054" +
    "\016\037\017\026\026\035\037\031\041\032\044\062\045" +
    "\033\050\055\051\012\056\074\057\024\060\020\061\063" +
    "\062\027\063\045\001\002\000\004\007\235\001\002\000" +
    "\062\004\uffd1\005\uffd1\006\uffd1\007\uffd1\012\uffd1\013\uffd1" +
    "\014\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\uffd1\053\uffd1\001\002\000" +
    "\056\005\uffb2\007\uffb2\012\uffb2\013\uffb2\014\uffb2\016\uffb2" +
    "\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025" +
    "\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2" +
    "\035\uffb2\036\uffb2\053\uffb2\001\002\000\056\005\uffb4\007" +
    "\uffb4\012\uffb4\013\uffb4\014\uffb4\016\uffb4\017\uffb4\020\uffb4" +
    "\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\027\uffb4\030" +
    "\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4" +
    "\053\uffb4\001\002\000\042\004\007\006\021\016\037\017" +
    "\026\026\035\037\031\041\032\045\033\050\055\051\012" +
    "\056\074\057\024\060\020\061\063\062\027\063\045\001" +
    "\002\000\006\007\242\036\132\001\002\000\004\013\uffcf" +
    "\001\002\000\004\007\244\001\002\000\062\004\uffa9\005" +
    "\uffa9\006\uffa9\007\uffa9\012\uffa9\013\uffa9\014\uffa9\016\uffa9" +
    "\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025" +
    "\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9" +
    "\035\uffa9\036\uffa9\053\uffa9\001\002\000\044\004\007\006" +
    "\021\011\uffa2\016\037\017\026\026\035\037\031\041\032" +
    "\045\033\050\055\051\012\056\074\057\024\060\020\061" +
    "\063\062\027\063\045\001\002\000\006\014\260\036\132" +
    "\001\002\000\004\011\257\001\002\000\004\011\uffef\001" +
    "\002\000\006\011\uffa2\012\252\001\002\000\042\004\007" +
    "\006\021\016\037\017\026\026\035\037\031\041\032\045" +
    "\033\050\055\051\012\056\074\057\024\060\020\061\063" +
    "\062\027\063\045\001\002\000\004\011\ufff0\001\002\000" +
    "\004\011\uffed\001\002\000\006\011\uffa2\012\252\001\002" +
    "\000\004\011\uffee\001\002\000\074\002\ufff2\004\ufff2\006" +
    "\ufff2\010\ufff2\011\ufff2\012\ufff2\015\ufff2\016\ufff2\017\ufff2" +
    "\026\ufff2\037\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045" +
    "\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\054\ufff2" +
    "\055\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063" +
    "\ufff2\001\002\000\064\004\007\006\021\010\054\015\uffa2" +
    "\016\037\017\026\026\035\037\031\041\032\042\064\043" +
    "\060\044\062\045\033\046\067\047\025\050\055\051\012" +
    "\052\041\055\016\056\043\057\024\060\020\061\063\062" +
    "\027\063\045\001\002\000\006\011\ufff1\012\ufff1\001\002" +
    "\000\074\002\ufffa\004\ufffa\006\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\015\ufffa\016\ufffa\017\ufffa\026\ufffa\037\ufffa\041\ufffa" +
    "\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050" +
    "\ufffa\051\ufffa\052\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa" +
    "\060\ufffa\061\ufffa\062\ufffa\063\ufffa\001\002\000\050\004" +
    "\007\006\021\010\054\013\uffa2\016\037\017\026\026\035" +
    "\037\031\041\032\044\062\045\033\050\055\051\012\056" +
    "\074\057\024\060\020\061\063\062\027\063\045\001\002" +
    "\000\004\013\uffeb\001\002\000\004\007\266\001\002\000" +
    "\062\004\uffcd\005\uffcd\006\uffcd\007\uffcd\012\uffcd\013\uffcd" +
    "\014\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023" +
    "\uffcd\024\uffcd\025\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd" +
    "\033\uffcd\034\uffcd\035\uffcd\036\uffcd\053\uffcd\001\002\000" +
    "\050\004\007\006\021\010\054\014\uffa2\016\037\017\026" +
    "\026\035\037\031\041\032\044\062\045\033\050\055\051" +
    "\012\056\074\057\024\060\020\061\063\062\027\063\045" +
    "\001\002\000\004\005\271\001\002\000\062\004\uffd5\005" +
    "\uffd5\006\uffd5\007\uffd5\012\uffd5\013\uffd5\014\uffd5\016\uffd5" +
    "\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025" +
    "\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5" +
    "\035\uffd5\036\uffd5\053\uffd5\001\002\000\004\014\273\001" +
    "\002\000\004\005\274\001\002\000\062\004\uffd4\005\uffd4" +
    "\006\uffd4\007\uffd4\012\uffd4\013\uffd4\014\uffd4\016\uffd4\017" +
    "\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4" +
    "\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035" +
    "\uffd4\036\uffd4\053\uffd4\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\076\002\027\003\047\004\046\005\004\006" +
    "\007\007\067\010\060\011\016\012\033\013\014\014\043" +
    "\016\013\025\045\026\010\027\050\033\005\034\056\035" +
    "\065\036\055\037\041\040\070\041\022\042\012\043\052" +
    "\044\051\045\064\046\037\047\035\050\021\051\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\002\027\003\047\004\046\014\216\020\267\033" +
    "\005\034\056\035\065\037\041\040\070\041\022\042\012" +
    "\043\052\044\051\045\064\046\037\047\035\050\021\051" +
    "\215\001\001\000\072\002\027\003\047\004\046\007\174" +
    "\010\060\011\016\012\033\013\014\014\043\016\013\025" +
    "\045\026\010\027\050\033\005\034\056\035\065\036\055" +
    "\037\041\040\070\041\022\042\012\043\052\044\051\045" +
    "\064\046\037\047\035\050\021\051\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\002\027\003\047\004\046\014" +
    "\242\033\005\034\056\035\065\037\041\040\070\041\022" +
    "\042\012\043\052\044\051\045\064\046\037\047\035\050" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\002\027\003\047\004" +
    "\046\034\056\035\065\046\236\047\035\050\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\002\027\003" +
    "\047\004\046\034\056\035\065\046\235\047\035\050\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\002\027\003\047\004\046\034\056\035\065" +
    "\046\226\047\035\050\021\001\001\000\002\001\001\000" +
    "\022\002\027\003\047\004\046\034\056\035\065\046\210" +
    "\047\035\050\021\001\001\000\002\001\001\000\040\002" +
    "\027\003\047\004\046\034\056\035\065\037\177\040\070" +
    "\041\022\042\012\043\052\044\051\045\064\046\037\047" +
    "\035\050\021\001\001\000\002\001\001\000\006\017\144" +
    "\051\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\074\002" +
    "\027\003\047\004\046\006\172\007\067\010\060\011\016" +
    "\012\033\013\014\014\043\016\013\025\045\026\010\027" +
    "\050\033\005\034\056\035\065\036\055\037\041\040\070" +
    "\041\022\042\012\043\052\044\051\045\064\046\037\047" +
    "\035\050\021\051\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\002\027\003\047" +
    "\004\046\034\056\035\065\041\072\042\012\043\052\044" +
    "\051\045\064\046\037\047\035\050\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\002\027\003\047\004" +
    "\046\034\056\035\065\042\125\043\052\044\051\045\064" +
    "\046\037\047\035\050\021\001\001\000\032\002\027\003" +
    "\047\004\046\034\056\035\065\042\124\043\052\044\051" +
    "\045\064\046\037\047\035\050\021\001\001\000\032\002" +
    "\027\003\047\004\046\034\056\035\065\042\123\043\052" +
    "\044\051\045\064\046\037\047\035\050\021\001\001\000" +
    "\032\002\027\003\047\004\046\034\056\035\065\042\122" +
    "\043\052\044\051\045\064\046\037\047\035\050\021\001" +
    "\001\000\032\002\027\003\047\004\046\034\056\035\065" +
    "\042\121\043\052\044\051\045\064\046\037\047\035\050" +
    "\021\001\001\000\032\002\027\003\047\004\046\034\056" +
    "\035\065\042\102\043\052\044\051\045\064\046\037\047" +
    "\035\050\021\001\001\000\002\001\001\000\030\002\027" +
    "\003\047\004\046\034\056\035\065\043\120\044\051\045" +
    "\064\046\037\047\035\050\021\001\001\000\030\002\027" +
    "\003\047\004\046\034\056\035\065\043\105\044\051\045" +
    "\064\046\037\047\035\050\021\001\001\000\002\001\001" +
    "\000\026\002\027\003\047\004\046\034\056\035\065\044" +
    "\117\045\064\046\037\047\035\050\021\001\001\000\026" +
    "\002\027\003\047\004\046\034\056\035\065\044\110\045" +
    "\064\046\037\047\035\050\021\001\001\000\002\001\001" +
    "\000\024\002\027\003\047\004\046\034\056\035\065\045" +
    "\116\046\037\047\035\050\021\001\001\000\024\002\027" +
    "\003\047\004\046\034\056\035\065\045\115\046\037\047" +
    "\035\050\021\001\001\000\024\002\027\003\047\004\046" +
    "\034\056\035\065\045\114\046\037\047\035\050\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\002\027\003\047\004\046\034\056\035" +
    "\065\037\127\040\070\041\022\042\012\043\052\044\051" +
    "\045\064\046\037\047\035\050\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\002\027\003\047\004\046" +
    "\034\056\035\065\040\132\041\022\042\012\043\052\044" +
    "\051\045\064\046\037\047\035\050\021\001\001\000\002" +
    "\001\001\000\044\002\027\003\047\004\046\014\134\033" +
    "\005\034\056\035\065\037\041\040\070\041\022\042\012" +
    "\043\052\044\051\045\064\046\037\047\035\050\021\001" +
    "\001\000\002\001\001\000\044\002\027\003\047\004\046" +
    "\014\150\033\005\034\056\035\065\037\041\040\070\041" +
    "\022\042\012\043\052\044\051\045\064\046\037\047\035" +
    "\050\021\001\001\000\006\016\140\051\003\001\001\000" +
    "\006\017\144\051\145\001\001\000\002\001\001\000\044" +
    "\002\027\003\047\004\046\014\142\033\005\034\056\035" +
    "\065\037\041\040\070\041\022\042\012\043\052\044\051" +
    "\045\064\046\037\047\035\050\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\147\051\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\022\154\023\155\051\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\024\162\051" +
    "\161\001\001\000\002\001\001\000\044\002\027\003\047" +
    "\004\046\014\157\033\005\034\056\035\065\037\041\040" +
    "\070\041\022\042\012\043\052\044\051\045\064\046\037" +
    "\047\035\050\021\001\001\000\002\001\001\000\004\022" +
    "\163\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\024\164\051\161\001\001\000\002\001\001\000\040\002" +
    "\027\003\047\004\046\034\056\035\065\037\166\040\070" +
    "\041\022\042\012\043\052\044\051\045\064\046\037\047" +
    "\035\050\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\072\002\027\003" +
    "\047\004\046\007\174\010\060\011\016\012\033\013\014" +
    "\014\043\016\013\025\045\026\010\027\050\033\005\034" +
    "\056\035\065\036\055\037\041\040\070\041\022\042\012" +
    "\043\052\044\051\045\064\046\037\047\035\050\021\051" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\072\002" +
    "\027\003\047\004\046\007\202\010\060\011\201\012\033" +
    "\013\014\014\043\016\013\025\045\026\010\027\050\033" +
    "\005\034\056\035\065\036\055\037\041\040\070\041\022" +
    "\042\012\043\052\044\051\045\064\046\037\047\035\050" +
    "\021\051\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\070\002\027\003\047\004\046\010\205\011\204\012" +
    "\033\013\014\014\043\016\013\025\045\026\010\027\050" +
    "\033\005\034\056\035\065\036\055\037\041\040\070\041" +
    "\022\042\012\043\052\044\051\045\064\046\037\047\035" +
    "\050\021\051\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\002\027\003\047\004\046\034\056\035\065" +
    "\045\207\046\037\047\035\050\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\002\027\003\047\004\046" +
    "\014\216\020\217\033\005\034\056\035\065\037\041\040" +
    "\070\041\022\042\012\043\052\044\051\045\064\046\037" +
    "\047\035\050\021\051\215\001\001\000\040\002\027\003" +
    "\047\004\046\034\056\035\065\037\213\040\070\041\022" +
    "\042\012\043\052\044\051\045\064\046\037\047\035\050" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\222\051\223\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\002\027\003\047\004\046" +
    "\014\224\033\005\034\056\035\065\037\041\040\070\041" +
    "\022\042\012\043\052\044\051\045\064\046\037\047\035" +
    "\050\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\225\051\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\002\027\003\047\004" +
    "\046\034\056\035\065\047\231\050\021\001\001\000\002" +
    "\001\001\000\050\002\027\003\047\004\046\014\216\020" +
    "\233\033\005\034\056\035\065\037\041\040\070\041\022" +
    "\042\012\043\052\044\051\045\064\046\037\047\035\050" +
    "\021\051\215\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\002\027\003" +
    "\047\004\046\034\056\035\065\037\240\040\070\041\022" +
    "\042\012\043\052\044\051\045\064\046\037\047\035\050" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\002\027\003\047\004" +
    "\046\030\250\031\246\034\056\035\065\037\245\040\070" +
    "\041\022\042\012\043\052\044\051\045\064\046\037\047" +
    "\035\050\021\051\247\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\032\252\051\253\001" +
    "\001\000\042\002\027\003\047\004\046\030\254\034\056" +
    "\035\065\037\245\040\070\041\022\042\012\043\052\044" +
    "\051\045\064\046\037\047\035\050\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\032\255\051\253\001" +
    "\001\000\002\001\001\000\002\001\001\000\072\002\027" +
    "\003\047\004\046\007\260\010\060\011\016\012\033\013" +
    "\014\014\043\016\013\025\045\026\010\027\050\033\005" +
    "\034\056\035\065\036\055\037\041\040\070\041\022\042" +
    "\012\043\052\044\051\045\064\046\037\047\035\050\021" +
    "\051\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\002\027\003\047\004\046\014\216\020\263\033\005" +
    "\034\056\035\065\037\041\040\070\041\022\042\012\043" +
    "\052\044\051\045\064\046\037\047\035\050\021\051\215" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\002\027\003\047\004\046\014\216\020\271" +
    "\033\005\034\056\035\065\037\041\040\070\041\022\042" +
    "\012\043\052\044\051\045\064\046\037\047\035\050\021" +
    "\051\215\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SMPLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SMPLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SMPLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    String msg = "Line " + lexer.getLine() + ", pos " +
				       lexer.getColumn() +
				       ": Unrecognised token <" +
                       lexer.getText() + ">";
		    throw new SMPLSyntaxException(msg, ioe);
		}
	  
    }


		SMPLLexer lexer;

		public SMPLParser(SMPLLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.println("Line " + lexer.getLine());

            int column = lexer.getColumn();

            for (int i = 0; i < column; i++) {
                System.err.print(lexer.yycharat(i));
            }
            System.err.println();

            // print an indicator on screen that will show the user
            // where the error is
            String indicator = String.format("%" + lexer.getColumn() + "s","^");
            System.err.println(indicator);

		    report_error("Syntax error", cur_token);
		}
	    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SMPLParser$actions {
  private final SMPLParser parser;

  /** Constructor */
  CUP$SMPLParser$actions(SMPLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action_part00000000(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SMPLParser$result;

      /* select the action based on the action number */
      switch (CUP$SMPLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              SMPLProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLProgram(s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("program",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLProgram start_val = (SMPLProgram)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		RESULT = start_val;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SMPLParser$parser.done_parsing();
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                lst.add(s); 
                RESULT = lst;
		     
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		        RESULT = new StmtSequence(s);
		     
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= closedStmt 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= openStmt 
            {
              Statement RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement o = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = o; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // closedStmt ::= assignment SEMI 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtAssignment a = (StmtAssignment)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = a; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("closedStmt",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // closedStmt ::= definition SEMI 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = d; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("closedStmt",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // closedStmt ::= outStmt SEMI 
            {
              Statement RESULT =null;
		int ioleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int ioright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Statement io = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = io; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("closedStmt",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // closedStmt ::= letStmt SEMI 
            {
              Statement RESULT =null;
		int letleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int letright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtLet let = (StmtLet)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = let; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("closedStmt",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // closedStmt ::= ifStmt 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtIfElse i = (StmtIfElse)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = i; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("closedStmt",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // closedStmt ::= caseStmt 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtCase c = (StmtCase)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("closedStmt",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // closedStmt ::= expression SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new Statement(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("closedStmt",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // openStmt ::= IF logicExp THEN stmt 
            {
              Statement RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp pred = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement then = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new StmtIfElse(pred, then); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("openStmt",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // openStmt ::= IF logicExp THEN closedStmt ELSE openStmt 
            {
              Statement RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		Exp pred = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Statement then = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int altleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int altright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement alt = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new StmtIfElse(pred, then, alt); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("openStmt",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // caseStmt ::= CASE LBRACE clauses RBRACE 
            {
              StmtCase RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<CaseClause> c = (ArrayList<CaseClause>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                RESULT = new StmtCase(c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("caseStmt",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // clause ::= logicExp COLON stmt 
            {
              CaseClause RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp pred = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int actionleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int actionright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement action = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new CaseClause(pred, action); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("clause",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // clauses ::= clause clauseLst 
            {
              ArrayList<CaseClause> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		CaseClause c = (CaseClause)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int clstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int clstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<CaseClause> clst = (ArrayList<CaseClause>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                clst.add(0, c);
                RESULT = clst;
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("clauses",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // clauses ::= empty 
            {
              ArrayList<CaseClause> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("clauses",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // clauseLst ::= COMMA clause clauseLst 
            {
              ArrayList<CaseClause> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		CaseClause c = (CaseClause)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int clstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int clstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<CaseClause> clst = (ArrayList<CaseClause>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                clst.add(0, c);
                RESULT = clst;
              
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("clauseLst",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // clauseLst ::= empty 
            {
              ArrayList<CaseClause> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("clauseLst",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ifStmt ::= IF logicExp THEN closedStmt ELSE closedStmt 
            {
              StmtIfElse RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		Exp pred = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Statement then = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int altleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int altright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement alt = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                RESULT = new StmtIfElse(pred, then, alt); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("ifStmt",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // assignment ::= IDs ASSIGN expressions 
            {
              StmtAssignment RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> id = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ExpSequence e = (ExpSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		            RESULT = new StmtAssignment(id, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // definition ::= DEF ID expression 
            {
              StmtDefinition RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                    RESULT = new StmtDefinition(id, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("definition",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // procExp ::= PROC LPAREN IDs RPAREN expression 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> p = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpProcedure(p, body); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procExp",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // procExp ::= PROC ID expression 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpProcedure(id, body);
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procExp",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IDs ::= ID IDList 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int idlleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<String> idl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                idl.add(0, id);
                RESULT = idl;
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("IDs",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IDs ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("IDs",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IDList ::= COMMA ID IDList 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int idlleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<String> idl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                idl.add(0, id);
                RESULT = idl;
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("IDList",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IDList ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("IDList",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // multiExp ::= LPAREN expressions RPAREN 
            {
              Exp RESULT =null;
		int expsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ExpSequence exps = (ExpSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new MultiExp(exps); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("multiExp",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= logicExp 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= procExp 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= LBRACE stmtList RBRACE 
            {
              Exp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = body; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expressions ::= expression expressionList 
            {
              ExpSequence RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ExpSequence el = (ExpSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                    el.add(e);
                    RESULT = el;
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expressions ::= empty 
            {
              ExpSequence RESULT =null;
		 RESULT = new ExpSequence(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expressionList ::= COMMA expression expressionList 
            {
              ExpSequence RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ExpSequence el = (ExpSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                        el.add(e);
                        RESULT = el;
                    
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressionList",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expressionList ::= empty 
            {
              ExpSequence RESULT =null;
		 RESULT = new ExpSequence(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressionList",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // letStmt ::= LET LPAREN bindings RPAREN expression 
            {
              StmtLet RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<Binding> bs = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		        RESULT = new StmtLet(bs, body); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("letStmt",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // binding ::= ID ASSIGN logicExp 
            {
              Binding RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new Binding(v, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("binding",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bindings ::= binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                bl.add(0,b);
                RESULT = bl;
             
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindings",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // bindings ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindings",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // bindingsAux ::= COMMA binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                    bl.add(0,b);
                    RESULT = bl;
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // bindingsAux ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // listExp ::= LBRACKET expressions RBRACKET 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ExpSequence e = (ExpSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                RESULT = new ExpList(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("listExp",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // vecExp ::= LBRACKET COLON expressions COLON RBRACKET 
            {
              ExpVector RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ExpSequence e = (ExpSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		
                RESULT = new ExpVector(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("vecExp",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // indexVecExp ::= primary LBRACKET logicExp RBRACKET 
            {
              ExpIndexVector RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                    RESULT = new ExpIndexVector(p, n); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("indexVecExp",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // callExp ::= primary LPAREN expressions RPAREN 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ExpSequence e = (ExpSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                RESULT = new ExpCall(p, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("callExp",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // callExp ::= CALL LPAREN primary COMMA expressions RPAREN 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ExpSequence e = (ExpSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                RESULT =  new ExpCall(p, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("callExp",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // outStmt ::= PRINT LPAREN logicExp RPAREN 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                RESULT = new StmtPrint(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("outStmt",28, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // outStmt ::= PRINTLN LPAREN logicExp RPAREN 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                RESULT = new StmtPrintLn(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("outStmt",28, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // inStmt ::= READ LPAREN RPAREN 
            {
              Statement RESULT =null;
		
                RESULT = new StmtRead(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("inStmt",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // inStmt ::= READINT LPAREN RPAREN 
            {
              Statement RESULT =null;
		
                RESULT = new StmtReadInt(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("inStmt",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // logicExp ::= logicExp OR orComp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp o = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpOr(e, o); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logicExp",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // logicExp ::= orComp 
            {
              Exp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp o = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = o; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logicExp",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // orComp ::= orComp AND relExp 
            {
              Exp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp o = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpAnd(o, r); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("orComp",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // orComp ::= relExp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = r; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("orComp",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // relExp ::= relExp NEQ bitExp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpNEQ(r, b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relExp",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // relExp ::= relExp GTEQ bitExp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpGTEQ(r, b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relExp",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // relExp ::= relExp LTEQ bitExp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpLTEQ(r, b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relExp",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // relExp ::= relExp LT bitExp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpLT(r, b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relExp",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // relExp ::= relExp GT bitExp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpGT(r, b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relExp",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // relExp ::= relExp EQ bitExp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpEQ(r, b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relExp",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // relExp ::= bitExp 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = b; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relExp",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // bitExp ::= bitExp BOR arithExp 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpBOR(b, a); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitExp",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bitExp ::= bitExp BAND arithExp 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpBAND(b, a); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitExp",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // bitExp ::= arithExp 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = a; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitExp",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // arithExp ::= arithExp PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpAdd(e, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // arithExp ::= arithExp MINUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new ExpSub(e, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // arithExp ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // term ::= term MUL factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		    RESULT = new ExpMul(t, f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // term ::= term DIV factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		    RESULT = new ExpDiv(t, f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // term ::= term MOD factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		    RESULT = new ExpMod(t, f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // term ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // factor ::= unary POW factor 
            {
              Exp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp u = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            RESULT = new ExpPow(u, f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // factor ::= unary 
            {
              Exp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp u = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = u; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // unary ::= PLUS unary 
            {
              Exp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp u = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpUnary("+", u); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("unary",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // unary ::= MINUS unary 
            {
              Exp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp u = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpUnary("-", u); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("unary",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // unary ::= BNOT unary 
            {
              Exp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp u = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpBNOT(u); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("unary",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // unary ::= NOT unary 
            {
              Exp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp u = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpNot(u); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("unary",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // unary ::= primary 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("unary",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // primary ::= literal 
            {
              Exp RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLValue< ? > lit = (SMPLValue< ? >)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLit(lit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("primary",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // primary ::= ID 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpId(id); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("primary",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // primary ::= callExp 
            {
              Exp RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp cl = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = cl; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("primary",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // primary ::= vecExp 
            {
              Exp RESULT =null;
		int vecleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vecright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ExpVector vec = (ExpVector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = vec; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("primary",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // primary ::= indexVecExp 
            {
              Exp RESULT =null;
		int ivecleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int ivecright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ExpIndexVector ivec = (ExpIndexVector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = ivec; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("primary",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // primary ::= listExp 
            {
              Exp RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ExpList lst = (ExpList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("primary",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // primary ::= inStmt 
            {
              Exp RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement in = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = in; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("primary",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // primary ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("primary",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // literal ::= INT 
            {
              SMPLValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = SMPLValue.make(ilit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literal",38, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // literal ::= DOUBLE 
            {
              SMPLValue< ? > RESULT =null;
		int dlitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int dlitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Double dlit = (Double)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = SMPLValue.make(dlit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literal",38, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // literal ::= STRING 
            {
              SMPLValue< ? > RESULT =null;
		int slitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String slit = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = SMPLValue.make(slit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literal",38, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // literal ::= CHARACTER 
            {
              SMPLValue< ? > RESULT =null;
		int chlitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int chlitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Character chlit = (Character)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = SMPLValue.make(chlit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literal",38, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // literal ::= BOOLEAN 
            {
              SMPLValue< ? > RESULT =null;
		int blitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int blitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Boolean blit = (Boolean)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = SMPLValue.make(blit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literal",38, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // literal ::= NIL 
            {
              SMPLValue< ? > RESULT =null;
		int nilleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int nilright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Object nil = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLPair(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literal",38, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // empty ::= 
            {
              Object RESULT =null;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("empty",39, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SMPLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
              return CUP$SMPLParser$do_action_part00000000(
                               CUP$SMPLParser$act_num,
                               CUP$SMPLParser$parser,
                               CUP$SMPLParser$stack,
                               CUP$SMPLParser$top);
    }
}

}
