package smpl.syntax.lexer;

/* Specification for SMPL tokens */

// user customisations
import java_cup.runtime.*;

import smpl.exceptions.TokenException;

import smpl.syntax.parser.sym;

// Jlex directives
    
%%

%cup
%public

%class SMPLLexer

%type java_cup.runtime.Symbol

%throws TokenException

%eofval{
	return new Symbol(sym.EOF);
%eofval}

%eofclose false

%char
%column
%line

%{
    StringBuffer string = new StringBuffer();

    public int getChar() {
	    return yychar + 1;
    }

    public int getColumn() {
    	return yycolumn + 1;
    }

    public int getLine() {
	    return yyline + 1;
    }

    public String getText() {
	    return yytext();
    }
%}

nl = [\n\r]

cc = ([\b\f]|{nl})

ws = {cc}|[\t ]

alpha = [a-zA-Z_]

alphanum = {alpha}|[0-9]

binary = [01]

hexadecimal = [a-zA-Z0-9]

identifier = [^\(\)\[\]\{\}\"\',:#\s][^\(\)\[\]\{\}\"\',:\s]+

%state STRING

%%

<YYINITIAL>	{nl} {
    //skip newline, but reset char counter
    yychar = 0;
}

<YYINITIAL>	{ws} {/* skip whitespace */}

<YYINITIAL>	"+"	{return new Symbol(sym.PLUS);}
<YYINITIAL>	"-"	{return new Symbol(sym.MINUS);}
<YYINITIAL>	"*"	{return new Symbol(sym.MUL);}
<YYINITIAL>	"/"	{return new Symbol(sym.DIV);}
<YYINITIAL>	"%"	{return new Symbol(sym.MOD);}
<YYINITIAL> "^" {return new Symbol(sym.POW);}

<YYINITIAL>	"="	{return new Symbol(sym.ASSIGN);}

<YYINITIAL>	"("	{return new Symbol(sym.LPAREN);}
<YYINITIAL>	")"	{return new Symbol(sym.RPAREN);}
<YYINITIAL> ";" {return new Symbol(sym.SEMI);}

<YYINITIAL> [0-9]+ {
    // INTEGER
    return new Symbol(sym.INT, 
            new Integer(yytext()));
}

<YYINITIAL> "#b"{binary}+ {
    // BINARY
    String val = yytext().substring(2);
    return new Symbol(sym.INT,
        Integer.parseInt(val, 2));
}

<YYINITIAL> "#x"{hexadecimal}+ {
    // HEXADECIMAL
    String val = yytext().substring(2);
    return new Symbol(sym.INT,
        Integer.parseInt(val, 16));
}

<YYINITIAL> [0-9]*\.[0-9]+ {
    // DOUBLE
    return new Symbol(sym.DOUBLE,
            new Double(yytext()));
}

<YYINITIAL> \" { 
    // STRING
    string.setLength(0); yybegin(STRING); 
}

<YYINITIAL> "#"[tf] {
    // BOOLEAN
    // get the letter after the # sign
    char val = yycharat(1);
    if (val == 't') {
        return new Symbol(sym.BOOLEAN,
            new Boolean(true));
    }
    return new Symbol(sym.BOOLEAN,
        new Boolean(false));
}

<YYINITIAL> "#c"[^\s] {
    // CHARACTER
    char val = yycharat(2);
    return new Symbol(sym.CHARACTER, 
        new Character(val));
}

<YYINITIAL> "#c\\n" {
    // ESCAPED CHARACTER \n
    return new Symbol(sym.CHARACTER, 
        new Character('\n'));
}

<YYINITIAL> "#c\\t" {
    // ESCAPED CHARACTER \t
    return new Symbol(sym.CHARACTER, 
        new Character('\t'));
}

<YYINITIAL> "#c\\\\" {
    // ESCAPED CHARACTER \
    return new Symbol(sym.CHARACTER, 
        new Character('\\'));
}

<YYINITIAL> "#u"{hexadecimal}{hexadecimal}{hexadecimal}{hexadecimal} {
    // UNICODE CHARACTER
    String val = yytext().substring(2);
    int ch = Integer.parseInt(val, 16);
    return new Symbol(sym.CHARACTER,
        new Character((char) ch));
}

<YYINITIAL> {identifier} {
    // IDENTIFIER
    return new Symbol(sym.ID, yytext());
}

<YYINITIAL> "#e" { return new Symbol(sym.NIL); }

<STRING> {
    \"               { yybegin(YYINITIAL);
                        return new Symbol(sym.STRING,
                        string.toString()); }

    [^\n\r\"\\]      { string.append(yytext()); }
    \\t              { string.append('\t'); }
    \\n              { string.append('\n'); }
    \\\"             { string.append('\"'); }
    \\               { string.append('\\'); }
}

<YYINITIAL> [^\s\"\']+ { 
    // ensures all tokens without whitespace separating excluding
    // quotations, parentheses, brackets, braces, colons and commas are
    // caught and dealt with as an error if it doesn't match any of our 
    // language's rules.
    String msg = String.format("Unrecognised Token: %s", yytext());
    throw new TokenException(msg);
}
