package smpl.syntax.lexer;

/* Specification for SMPL tokens */

// user customisations
import java_cup.runtime.*;

import smpl.exceptions.TokenException;

import smpl.syntax.parser.sym;

// Jlex directives
    
%%

%cup
%public

%class SMPLLexer

%type java_cup.runtime.Symbol

%throws TokenException

%eofval{
	return new Symbol(sym.EOF);
%eofval}

%eofclose false

%char
%column
%line

%{
    StringBuffer string = new StringBuffer();

    public int getChar() {
	    return yychar + 1;
    }

    public int getColumn() {
    	return yycolumn + 1;
    }

    public int getLine() {
	    return yyline + 1;
    }

    public String getText() {
	    return yytext();
    }
%}

nl = [\n\r]

cc = ([\b\f]|{nl})

ws = {cc}|[\t ]

alpha = [a-zA-Z_]

alphanum = {alpha}|[0-9]

%state STRING

%%

<YYINITIAL>	{nl} {
    //skip newline, but reset char counter
    yychar = 0;
}

<YYINITIAL>	{ws} {/* skip whitespace */}

<YYINITIAL>	"+"	{return new Symbol(sym.PLUS);}
<YYINITIAL>	"-"	{return new Symbol(sym.MINUS);}
<YYINITIAL>	"*"	{return new Symbol(sym.MUL);}
<YYINITIAL>	"/"	{return new Symbol(sym.DIV);}
<YYINITIAL>	"%"	{return new Symbol(sym.MOD);}
<YYINITIAL> "^" {return new Symbol(sym.POW);}

<YYINITIAL>	"="	{return new Symbol(sym.ASSIGN);}

<YYINITIAL>	"("	{return new Symbol(sym.LPAREN);}
<YYINITIAL>	")"	{return new Symbol(sym.RPAREN);}
<YYINITIAL> ";" {return new Symbol(sym.SEMI);}

<YYINITIAL> [0-9]+ {
    // INTEGER
    return new Symbol(sym.INT, 
            new Integer(yytext()));
}

<YYINITIAL> [0-9]*\.[0-9]+ {
    // DOUBLE
    return new Symbol(sym.DOUBLE,
            new Double(yytext()));
}

<YYINITIAL> \" { string.setLength(0); yybegin(STRING); }

<YYINITIAL> {alpha}{alphanum}* {
    // IDENTIFIER
    return new Symbol(sym.ID, yytext());
}

<STRING> {
    \"               { yybegin(YYINITIAL);
                        return new Symbol(sym.STRING,
                        string.toString()); }

    [^\n\r\"\\]      { string.append(yytext()); }
    \\t              { string.append('\t'); }
    \\n              { string.append('\n'); }
    \\\"             { string.append('\"'); }
    \\               { string.append('\\'); }
}

<YYINITIAL> [^\s\"\'\(\)\[\]\{\}:,]+ { 
    // ensures all tokens without whitespace separating them is caught
    // and dealt with as an error if it doesn't match any of our language
    // rules.
    String msg = String.format("Unrecognised Token: %s", yytext());
    throw new TokenException(msg);
}
